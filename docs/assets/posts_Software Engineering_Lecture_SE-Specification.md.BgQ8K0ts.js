import{_ as i,c as t,a5 as a,o as l}from"./chunks/framework.CHhwEXkI.js";const h=JSON.parse('{"title":"SE-Specification","description":"","frontmatter":{"date":"2025-05-27T00:00:00.000Z","title":"SE-Specification","status":"DONE","author":["AllenYGY"],"tags":["NOTE","Software-Engineering","Software-Specification","Review"],"publish":true},"headers":[],"relativePath":"posts/Software Engineering/Lecture/SE-Specification.md","filePath":"posts/Software Engineering/Lecture/SE-Specification.md","lastUpdated":null}'),s={name:"posts/Software Engineering/Lecture/SE-Specification.md"};function n(o,e,r,c,u,d){return l(),t("div",null,e[0]||(e[0]=[a('<h1 id="se-specification" tabindex="-1">SE-Specification <a class="header-anchor" href="#se-specification" aria-label="Permalink to &quot;SE-Specification&quot;">​</a></h1><h2 id="software-requirements-specification" tabindex="-1">Software Requirements Specification <a class="header-anchor" href="#software-requirements-specification" aria-label="Permalink to &quot;Software Requirements Specification&quot;">​</a></h2><ul><li>Is a document used to specify the users&#39; requirements</li><li>Is also called the system requirements specification</li><li>Contains <em>detailed descriptions</em> of the <em>system&#39;s functions</em>, <em>services</em>, and <em>operational constraints</em>.</li><li>Written by developers for developers</li><li>Defines what should be implemented</li><li>Can be written using natural language, structured natural language, diagrams, tables, or formal language (mathematics).</li><li>Requirements should be specified quantitatively rather than qualitatively</li><li>Guidelines for writing specifications include consistency in format, language, and content, ensuring readability, avoiding <em>jargon</em>, highlighting key parts, and using tables and diagrams</li><li>The SRS should not include information such as <em>cost</em>, <em>delivery schedules</em>, <em>reporting procedures</em>, <em>software development methods</em>, <em>quality assurance</em>, <em>validation</em> and <em>verification criteria</em>, or <em>acceptance procedures</em></li></ul><h3 id="what-are-uml-diagrams-used-for" tabindex="-1">What are UML diagrams used for? <a class="header-anchor" href="#what-are-uml-diagrams-used-for" aria-label="Permalink to &quot;What are UML diagrams used for?&quot;">​</a></h3><ul><li>UML is the most popular diagrammatic notation used for object-oriented development</li><li>They are used to support Object-Oriented Software Development from Object-Oriented Analysis (Requirements Specification) through Object-Oriented Programming (Implementation)</li><li>They are used to analyze and specify software requirements</li><li>They are used to create system models from different perspectives, including the environment, behavior flow, and structure of the system</li></ul><h3 id="why-is-the-software-requirements-specification-important" tabindex="-1">Why is the software requirements specification important? <a class="header-anchor" href="#why-is-the-software-requirements-specification-important" aria-label="Permalink to &quot;Why is the software requirements specification important?&quot;">​</a></h3><ul><li>It is a <em>fundamental activity</em> for understanding and defining system services and identifying constraints.</li><li>It defines what should be implemented by providing detailed descriptions of the system&#39;s functions, services, and operational constraints.</li><li>A clear specification helps avoid major problems like <em>ambiguity</em>, <em>incompleteness</em>, and <em>inconsistency</em> in requirements.</li><li>Specifications can be used to generate test cases and test oracles.</li><li>Capturing requirements is crucial for avoiding costly errors and helping projects meet their deadlines and budget.</li><li>Writing documentation, which includes the SRS, is considered important in professional practice.</li></ul><h3 id="what-are-the-main-problems-in-software-requirements-how-to-avoid-these-problems" tabindex="-1">What are the main problems in software requirements? How to avoid these problems? <a class="header-anchor" href="#what-are-the-main-problems-in-software-requirements-how-to-avoid-these-problems" aria-label="Permalink to &quot;What are the main problems in software requirements? How to avoid these problems?&quot;">​</a></h3><ul><li><strong>Main Problems in Software Requirements:</strong><ul><li><strong>Impreciseness</strong>, which includes: <ul><li><strong>Ambiguity:</strong> Requirements can be interpreted in different ways by different people.</li><li><strong>Incompleteness:</strong> Some necessary information might be missing.</li><li><strong>Inconsistency:</strong> Some descriptions might conflict with each other.</li></ul></li></ul></li><li><strong>Problems with Domain Requirements</strong>: <ul><li>Lack of common background between customers and developers.</li><li>Confusion with functional requirements.</li><li>Professional differences (&quot;worlds apart&quot;) between customers and developers.</li><li>If not satisfied, the system may be unworkable.</li></ul></li><li><strong>Difficulty specifying and verifying some Non-Functional Requirements</strong>, such as &quot;ease of use&quot;.</li><li><strong>Potential Conflicts between Non-Functional Requirements</strong>, like time (performance) and space (memory usage).</li></ul><p><strong>How to Avoid These Problems:</strong></p><ul><li><strong>Write a Software Requirements Specification (SRS)</strong>, which is a detailed document defining what should be implemented.</li><li><strong>Ensure Consistency</strong> in the specification&#39;s format, language, and content. Be as precise as possible in content.</li><li><strong>Make the Specification Readable</strong> by avoiding jargon, understanding different backgrounds, highlighting key parts, using references, and employing tables and diagrams.</li><li><strong>Specify Requirements Quantitatively</strong> rather than qualitatively (e.g., &quot;response time within 0.1 second&quot; instead of &quot;fast response time&quot;).</li><li><strong>Thoroughly Understand and Define System Services and Identify Constraints</strong> as a fundamental activity in the software development lifecycle.</li><li><strong>Do Not Include Information Not Belonging in the SRS</strong>, such as cost, delivery schedules, development methods, or acceptance procedures.</li><li>A clear and consistent specification helps avoid ambiguity, incompleteness, and inconsistency.</li><li>Specifications written in defined notation can be used to generate test cases and test oracles, implying precision helps verification.</li></ul><h3 id="why-do-we-need-to-generate-models-for-requirements" tabindex="-1">Why do we need to generate models for requirements? <a class="header-anchor" href="#why-do-we-need-to-generate-models-for-requirements" aria-label="Permalink to &quot;Why do we need to generate models for requirements?&quot;">​</a></h3><ul><li>Models are used to describe system requirements from different perspectives, including the environment, behavior flow, and structure of the system.</li><li>They are a method for specifying requirements, using diagrams and graphical notation alongside other forms like natural language and tables.</li><li>Generating models is part of analyzing requirements and the fundamental activity of understanding and defining system services and identifying constraints.</li><li>Models help refine requirements and provide detailed descriptions.</li><li>They are needed for validation, helping to ensure the system meets customer expectations by showing externally visible behavior from the user&#39;s point of view.</li><li>Models serve as the basis for subsequent system design activities, translating the requirements into design structures.</li><li>They help identify key system elements such as actors, use cases, objects, attributes, operations, and data transformations.</li></ul><h2 id="system-models" tabindex="-1">System Models <a class="header-anchor" href="#system-models" aria-label="Permalink to &quot;System Models&quot;">​</a></h2><ul><li>System models are used to describe <ul><li>the <em>environment</em> of the system <ul><li>Context model</li><li>Use case diagram</li></ul></li><li>the <em>behavior flow</em> of the system <ul><li>State machine model</li><li>Data-flow model</li></ul></li><li>the <em>structure</em> of the system <ul><li>Data model</li><li>Object model</li></ul></li></ul></li></ul><h3 id="environment-models" tabindex="-1">Environment Models <a class="header-anchor" href="#environment-models" aria-label="Permalink to &quot;Environment Models&quot;">​</a></h3><h4 id="context-model" tabindex="-1">Context model <a class="header-anchor" href="#context-model" aria-label="Permalink to &quot;Context model&quot;">​</a></h4><ul><li>Context model includes <ul><li>Environment – includes all the parts of the system related to what we want to model</li><li>Boundary - separates out parts of the environment we want to model</li></ul></li><li>Many factors can affect the boundary of the model <ul><li>Technical factors</li><li>Non-technical factors</li></ul></li></ul><h4 id="use-case-diagram" tabindex="-1">Use Case Diagram <a class="header-anchor" href="#use-case-diagram" aria-label="Permalink to &quot;Use Case Diagram&quot;">​</a></h4><ul><li><p>A use case diagram</p><ul><li>Describes the systems’ functionalities from a user’s (or other systems’) point of view</li><li>Shows the externally visible behavior of the system</li><li>Is in the first step of requirements specification</li></ul></li><li><p>A use case diagram contains</p><ul><li>Actors <ul><li>The role of the users that can play when interacting with the system</li></ul></li><li>Use cases <ul><li>Tasks (transactions) that the system can perform when users use the system</li></ul></li></ul></li><li><p>The actors and use cases must be determined (决定) by consulting（磋商）with the clients (客户)</p></li><li><p>Use case should focus on the goal rather than the process</p></li><li><p>Good use cases should</p><ul><li>Be observable – Focus on the basics</li></ul></li><li><p>Factors to consider when use case prioritizing</p><ul><li>Support major business process</li><li>Architectural significance</li><li>Use of new technologies</li><li>Needs of substantial research efforts</li><li>Great improvement in efficiency</li></ul></li><li><p>Use case Scenario</p><ul><li>A concrete sequence of events.</li><li>Occurs during one particular execution path in a user case</li><li>For every use case, there is a scenario that can describe the possible interactions between the user and the system for this use case.</li></ul></li><li><p><em>Basic scenario</em></p><ul><li>Normal sequence of events</li><li>Achieve the main goal of the use case with no problem, no interruption</li></ul></li><li><p><em>Alternative scenario</em></p><ul><li>Something goes wrong</li><li>Main goal cannot be finished</li><li>Normal case cannot be finished</li></ul></li><li><p><em>Example: Scenario for books</em></p><ul><li><img src="https://cdn.jsdelivr.net/gh/AllenYGY/ImageSpace@main/uPic/fnLlhL.png" alt="fnLlhL"></li></ul></li><li><p>A use case can be described in a natural language text containing abstract information (Initial description) or refined details (concrete information)</p><ul><li>Initial Description <img src="https://cdn.jsdelivr.net/gh/AllenYGY/ImageSpace@main/uPic/qUwnJ8.png" alt="qUwnJ8"><ul><li>Name of the use case</li><li>Participating (参与) actors</li><li>Description</li></ul></li><li>Concrete Description <img src="https://cdn.jsdelivr.net/gh/AllenYGY/ImageSpace@main/uPic/PvDyvi.png" alt="PvDyvi"><ul><li>Name of the use case</li><li>Use case ID</li><li>Participating（参与）actors</li><li>Entry conditions</li><li>Scenario</li><li>Priority</li><li>Exit Conditions</li><li>Quality requirements</li><li>Source</li></ul></li></ul></li><li><p>Relationships in Use Case Diagrams</p><ul><li>Between actors and use cases <ul><li><em>Communication</em> relationships</li></ul></li><li>Between use cases <ul><li><em>Include</em> relationships <ul><li>When use case A includes use case B, it means that use case B <em>must be implemented</em> in use case A.</li><li>For example, if a user must login to use the use case A, then A includes the use case login.</li><li><img src="https://cdn.jsdelivr.net/gh/AllenYGY/ImageSpace@main/uPic/br4kUD.png" alt="br4kUD"></li></ul></li><li><em>Extend</em> relationships <ul><li>For two use cases A and B, when B is <em>optional</em> to A.</li><li>If B is added into A to strengthen A, then B is an extension of A.</li><li><img src="https://cdn.jsdelivr.net/gh/AllenYGY/ImageSpace@main/uPic/BiqTuh.png" alt="BiqTuh"></li><li><img src="https://cdn.jsdelivr.net/gh/AllenYGY/ImageSpace@main/uPic/iMGZyg.png" alt="iMGZyg"></li></ul></li><li><em>Inheritance</em> relationships <ul><li>For two use cases A and B, if A the generalization of B, and B is a specialization of A, then they have inheritance relationships.</li><li>Usually in this case, there are several ways to offer the same function.</li><li><img src="https://cdn.jsdelivr.net/gh/AllenYGY/ImageSpace@main/uPic/kWVXYE.png" alt="kWVXYE"></li></ul></li></ul></li></ul></li></ul><h3 id="behavior-models" tabindex="-1">Behavior Models <a class="header-anchor" href="#behavior-models" aria-label="Permalink to &quot;Behavior Models&quot;">​</a></h3><ul><li>Describe overall function of the system <ul><li>State machine model (Finite State Machine) <ul><li>Event-driven，e.g. embedded systems</li></ul></li><li>Data flow models <ul><li>Data-driven, e.g. information systems</li></ul></li></ul></li></ul><h4 id="state-machine-model" tabindex="-1">State Machine Model <a class="header-anchor" href="#state-machine-model" aria-label="Permalink to &quot;State Machine Model&quot;">​</a></h4><ul><li><p>State Machine Model</p><ul><li>Has state transition (转换) diagrams</li><li>Also called state transition diagrams, finite state machine</li><li>Indicates how the system behaves as a consequence of external events</li><li>Describe the scenario in a diagram</li></ul></li><li><p>Elements in a State Machine Diagram <img src="https://cdn.jsdelivr.net/gh/AllenYGY/ImageSpace@main/uPic/i9FwKP.png" alt="i9FwKP"></p><ul><li>State <ul><li>a mode of behavior</li><li>last for a period (period cannot be ignored)</li></ul></li><li>Event <ul><li>Causes the transition from a state to another state</li></ul></li><li>Action <ul><li>The behavior that the system reacts to an event</li></ul></li><li>Condition <ul><li>A condition for state transition when event happens</li></ul></li></ul></li><li><p>Whether a behavior is a state or an event or an action depends on the real systems.</p></li></ul><h4 id="data-flow-model" tabindex="-1">Data-Flow Model <a class="header-anchor" href="#data-flow-model" aria-label="Permalink to &quot;Data-Flow Model&quot;">​</a></h4><ul><li><p>Indicates how data are transformed as they move through the system</p></li><li><p>Depicts the functions that transform the data flow</p></li><li><p>Explains to the systems users what is going on in the system (abstract)</p></li><li><p>Helps designers to design the system architectures (detailed).</p></li><li><p>Structured analysis method</p><ul><li>Data-flow Diagrams (System Analysis)</li><li>Structured Modular Design (System Design)</li></ul></li><li><p>Widely used before the OO method</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/AllenYGY/ImageSpace@main/uPic/IXsdjw.png" alt="IXsdjw"></p></li></ul><h2 id="object-oriented-technology" tabindex="-1">Object-Oriented Technology <a class="header-anchor" href="#object-oriented-technology" aria-label="Permalink to &quot;Object-Oriented Technology&quot;">​</a></h2><h3 id="object-oriented-development" tabindex="-1">Object-Oriented Development <a class="header-anchor" href="#object-oriented-development" aria-label="Permalink to &quot;Object-Oriented Development&quot;">​</a></h3><ul><li>A popular software development method</li><li>Develop reusable systems</li><li>The concept started in 1968</li><li>Based on the use of single object</li></ul><h3 id="objects-classes" tabindex="-1">Objects &amp; Classes <a class="header-anchor" href="#objects-classes" aria-label="Permalink to &quot;Objects &amp; Classes&quot;">​</a></h3><ul><li><p>Object</p><ul><li>An entity (实体)</li><li>Physical: a chair, a desk, a person</li><li>Logical: a list, a stack, a rectangle</li><li>Feature <ul><li>Can be described, e.g. shape, length</li><li>Can be created and destroyed</li></ul></li></ul></li><li><p>Class</p><ul><li>Normal meaning: A set of entities with similar attributes</li><li>Feature <ul><li>Abstraction（抽象） <ul><li>Focusing on the essential aspects (attributes under consideration) of an entity and ignoring its accidental (非主要的) properties.</li><li>Make some decision as late as possible</li><li>Avoid to make decisions on the design and implementation decisions before the problems are understood</li></ul></li><li>Encapsulation（封装）<em>Information Hiding</em><ul><li>The attributes and operations of a class are hidden from outside world</li><li>Separate the external aspects of an object, which are accessible to other objects.</li><li>Reduce the affection of the changes</li><li>Facilitate component reuse</li><li>Simplify the interfaces</li></ul></li><li>Inheritance（继承） <ul><li>Super-class and sub-class</li><li>Sub-class include the attributes in the super-class with some added or specialized features</li><li>It is the key feature of OO</li><li>The implementation in the super-class can be reused</li><li>The common changes to all the sub-classes can be implemented in the super-class</li><li>A sub-class can have several super-classes.</li></ul></li><li>Polymorphism（多态性） <ul><li>Reduce the cost that is needed to extend the system</li><li>Allow a set of different implementations (semantic meanings）</li><li>similar operations to have the same name.</li><li><img src="https://cdn.jsdelivr.net/gh/AllenYGY/ImageSpace@main/uPic/xih8nr.png" alt="xih8nr"></li></ul></li></ul></li></ul></li><li><p>OO <em>Object-Oriented</em> :Object + Classification + Inheritance + Communication</p><ul><li>A description that encapsulates （封装）the data and procedural abstractions (抽象）that are required to describe the content and behavior of some real world entities</li><li>A generalized description that describes a collection of similar objects.</li></ul></li><li><p>OO in one sentence:</p><ul><li>keep it DRY, keep it shy and tell the other guy</li><li>DRY: Do not Repeat Yourself</li><li>Shy: Should not reveal the information about itself unless really necessary</li><li>Tell the other guy: Send a message rather than a function call.</li></ul></li></ul><h3 id="what-are-the-features-of-a-class" tabindex="-1">What are the features of a class? <a class="header-anchor" href="#what-are-the-features-of-a-class" aria-label="Permalink to &quot;What are the features of a class?&quot;">​</a></h3><ul><li>Abstraction</li><li>Encapsulation</li><li>Inheritance</li><li>Polymorphism</li></ul>',33)]))}const p=i(s,[["render",n]]);export{h as __pageData,p as default};
