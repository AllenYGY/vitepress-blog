import{_ as t,c as a,a5 as i,o as r}from"./chunks/framework.CHhwEXkI.js";const d=JSON.parse('{"title":"What is a Computer","description":"","frontmatter":{"title":"What is a Computer","date":"2023-09-11T00:00:00.000Z","author":["AllenYGY"],"status":"DONE","tags":["NOTE","CO","Lec1"],"created":"2023-11-03T00:59","updated":"2024-06-14T17:12","publish":true},"headers":[],"relativePath":"posts/Computer Organization/Lecture/01-What is a Computer.md","filePath":"posts/Computer Organization/Lecture/01-What is a Computer.md","lastUpdated":null}'),n={name:"posts/Computer Organization/Lecture/01-What is a Computer.md"};function l(o,e,s,m,c,h){return r(),a("div",null,e[0]||(e[0]=[i('<h1 id="what-is-a-computer" tabindex="-1">What is a Computer <a class="header-anchor" href="#what-is-a-computer" aria-label="Permalink to &quot;What is a Computer&quot;">​</a></h1><ul><li><p>Definition:</p><ul><li>electronic, digital, general purpose computing machine that automatically follows a step-by-step list of instructions for solving a problem.</li><li>This step-by-step list of instructions that a computer follows is also called a computer program.</li></ul></li><li><p>Computer Part: case, motherboard, CPU, RAM, power supply, hard drive, graphic cards.</p></li></ul><h2 id="turing-machine" tabindex="-1"><em>Turing Machine</em> <a class="header-anchor" href="#turing-machine" aria-label="Permalink to &quot;*Turing Machine*&quot;">​</a></h2><ul><li><p>In 1936, British mathematician Alan Turing developed a hypothetical device, the Turing machine, which is the abstract model of all computers</p></li><li><p>A Turing machine consists of</p><ul><li>a tape divided into cells</li><li>a moving read/write head</li><li>a state register storing the state of the Turing machine</li><li>a finite table of instruction specifying what the machine does when reading the content of the current cell: <ul><li>move right/left; erase/write a symbol; change the state</li></ul></li></ul></li><li><p>All things that can be computed can be computed by a Turing machine</p></li></ul><h3 id="universal-turing-machine" tabindex="-1"><em>Universal Turing Machine</em> <a class="header-anchor" href="#universal-turing-machine" aria-label="Permalink to &quot;*Universal Turing Machine*&quot;">​</a></h3><ul><li>Turing described a Turing machine that could simulate all other Turing machines. <ul><li>inputs: data + a description of computation (Turing machine)</li></ul></li><li>A computer is a Universal Turing Machine!</li></ul><h2 id="historical-development" tabindex="-1"><em>Historical Development</em> <a class="header-anchor" href="#historical-development" aria-label="Permalink to &quot;*Historical Development*&quot;">​</a></h2><ul><li>Generation Zero: Mechanical Calculating Machines (1642-1945) <em>机械计算机</em></li><li>The First Generation: Vacuum Tube Computers (1945-1953) <em>真空管计算机</em></li><li>The Second Generation: Transistor Computers (1954-1965) <em>晶体管计算机</em></li><li>The Third Generation: Integrated Circuit (IC) Computers (1965-1980) <em>集成电路计算机</em></li><li>The Fourth Generation: VLSI Computers (1980-) <em>(very large scale integration computer)</em></li></ul><h2 id="the-von-neumann-architecture" tabindex="-1"><em>The von Neumann Architecture</em> <a class="header-anchor" href="#the-von-neumann-architecture" aria-label="Permalink to &quot;*The von Neumann Architecture*&quot;">​</a></h2><ul><li><p>stored-program architecture</p></li><li><p>Both data and program are stored in the memory</p></li><li><p>A Central Processing Unit (CPU)</p><ul><li>Control unit <em>控制单元</em></li><li>Arithmetic Logic Unit (ALU) <em>计算逻辑单元</em></li><li>Registers</li><li>IR: Current Instruction</li><li>PC: store the address of next instruction</li></ul></li><li><p>Main memory</p></li><li><p>I/O- system</p></li><li><p>a single path between the main memory and CPU, called the von Neumann bottleneck <img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-vonNeumannArchitecture.png" alt="The von Neumann Architecture"></p></li></ul><h3 id="von-neumann-execution-cycle" tabindex="-1"><em>Von Neumann Execution Cycle</em> <a class="header-anchor" href="#von-neumann-execution-cycle" aria-label="Permalink to &quot;*Von Neumann Execution Cycle*&quot;">​</a></h3><ul><li><em>Fetch-decode-execute cycle</em><ol><li>the control unit fetch the next instruction from the memory <em>控制单元取指令</em></li><li>the instruction is decoded into a language that the ALU understands <em>解码</em></li><li>data operands are fetched from the memory into the registers inside CPU <em>从内存获取数据操作数到寄存器</em></li><li>the ALU executes the instruction and places the result into the registers or memory <em>计算逻辑单元执行指令并把结果放到内存或寄存器</em></li></ol></li></ul><h3 id="the-von-neumann-bottleneck" tabindex="-1"><em>The von Neumann Bottleneck</em> <a class="header-anchor" href="#the-von-neumann-bottleneck" aria-label="Permalink to &quot;*The von Neumann Bottleneck*&quot;">​</a></h3><ul><li>CPU and memory are separate</li><li>All data and code are in the memory</li><li>CPU is usually faster than memory</li><li>CPU is forced to wait for needed data to be transferred to or from memory</li></ul><h3 id="the-system-bus-model-of-the-von-neumann-architecture" tabindex="-1"><em>The system bus model of the von Neumann Architecture</em> <a class="header-anchor" href="#the-system-bus-model-of-the-von-neumann-architecture" aria-label="Permalink to &quot;*The system bus model of the von Neumann Architecture*&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-System-bus-model.png" alt="System-bus-model"></p><h2 id="levels-of-abstraction" tabindex="-1"><em>Levels of Abstraction</em> <a class="header-anchor" href="#levels-of-abstraction" aria-label="Permalink to &quot;*Levels of Abstraction*&quot;">​</a></h2><ul><li><em>User level</em>: applications such as qq.exe <em>app</em></li><li><em>High level language</em>: C, Java, C++ <em>program language</em></li><li><em>Assembly language</em></li><li><em>Operating system</em></li><li><em>Machine Language</em>: Instruction Set A</li><li><em>Control level</em>: micro-code or hardwired</li><li><em>Digital logic</em>: circuits, gates</li></ul><h3 id="levels-of-transformations" tabindex="-1"><em>Levels of Transformations</em> <a class="header-anchor" href="#levels-of-transformations" aria-label="Permalink to &quot;*Levels of Transformations*&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Levels-of-Transformations-1.png" alt="Levels-of-Transformations"><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Levels-of-Transformations-2.png" alt="Levels-of-Transformations"></p><ul><li>Problem -&gt; Algorithm -&gt; Program -&gt; Instr Set Architecture -&gt; Microarch -&gt; Circuits -&gt; Device</li></ul><h3 id="the-machine-levels" tabindex="-1"><em>The Machine Levels</em> <a class="header-anchor" href="#the-machine-levels" aria-label="Permalink to &quot;*The Machine Levels*&quot;">​</a></h3><ul><li>Instruction Set Architecture (ISA): instructions that a CPU can execute</li><li>Microarchitecture: implementation of ISA</li><li>Circuits: Details of electrical circuits</li><li>Devices (transistors): Circuits are built by interconnecting transistors</li><li>Bits: Transistors operate on bits (“0” or “1”) that represent data and information</li></ul><h3 id="hardware-vs-software" tabindex="-1"><em>Hardware VS Software</em> <a class="header-anchor" href="#hardware-vs-software" aria-label="Permalink to &quot;*Hardware VS Software*&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Layers-of-Transformations.png" alt="Layers-of-Transformations"><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/CO-Hardware&amp;Software.png" alt="Hardware&amp;Software"></p><ul><li>Whatever can be done by hardware can also be done by software, and vice versa</li><li>Hardware implementations are faster but fixed</li><li>Software implementations are more flexible but slower</li></ul>',26)]))}const p=t(n,[["render",l]]);export{d as __pageData,p as default};
