import{_ as l,c as e,a5 as a,j as i,a as t,o as n}from"./chunks/framework.CHhwEXkI.js";const B=JSON.parse('{"title":"05-FP-Higher-Order Functions","description":"","frontmatter":{"date":"2025-04-09T00:00:00.000Z","title":"05-FP-Higher-Order Functions","status":"DONE","author":["AllenYGY"],"tags":["NOTE","Functional-Programming","Higher-Order","Map","Filter","Fold"],"publish":true},"headers":[],"relativePath":"posts/Functional Programming/Lecture/05-FP-Higher-Order Functions.md","filePath":"posts/Functional Programming/Lecture/05-FP-Higher-Order Functions.md","lastUpdated":null}'),h={name:"posts/Functional Programming/Lecture/05-FP-Higher-Order Functions.md"},r={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},d={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"25.399ex",height:"2.283ex",role:"img",focusable:"false",viewBox:"0 -759 11226.5 1009","aria-hidden":"true"},k={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},p={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.262ex",height:"1.181ex",role:"img",focusable:"false",viewBox:"0 -511 1000 522","aria-hidden":"true"},o={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},g={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"},c={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},T={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.832ex",height:"2.452ex",role:"img",focusable:"false",viewBox:"0 -833.9 2577.6 1083.9","aria-hidden":"true"},Q={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},F={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"};function u(m,s,y,C,x,f){return n(),e("div",null,[s[23]||(s[23]=a(`<h1 id="_05-fp-higher-order-functions" tabindex="-1">05-FP-Higher-Order Functions <a class="header-anchor" href="#_05-fp-higher-order-functions" aria-label="Permalink to &quot;05-FP-Higher-Order Functions&quot;">​</a></h1><h2 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h2><div class="language-OCaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">OCaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> rec</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> map</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> f</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> lst</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> =</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> []</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> []</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> h</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">::</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;">t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f h </span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map f t;;</span></span></code></pre></div>`,3)),i("p",null,[s[2]||(s[2]=t("Function type: ")),i("mjx-container",r,[(n(),e("svg",d,s[0]||(s[0]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(422,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(666.5,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(1473.2,0)"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1033,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(3028.5,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(3457.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(4124.2,0)"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1033,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(5679.5,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mtext" transform="translate(6208.5,0)"><path data-c="A0" d="" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6458.5,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6756.5,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7225.5,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(7864.3,0)"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1033,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(9419.5,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g><g data-mml-node="mtext" transform="translate(9848.5,0)"><path data-c="A0" d="" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(10098.5,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(10396.5,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(10865.5,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g></g></g>',1)]))),s[1]||(s[1]=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("msup",null,[i("mo",{stretchy:"false"},"("),i("mo",{"data-mjx-alternate":"1"},"′")]),i("mi",null,"a"),i("msup",null,[i("mo",{accent:"false",stretchy:"false"},"→"),i("mo",{"data-mjx-alternate":"1"},"′")]),i("mi",null,"b"),i("mo",{stretchy:"false"},")"),i("msup",null,[i("mo",{accent:"false",stretchy:"false"},"→"),i("mo",{"data-mjx-alternate":"1"},"′")]),i("mi",null,"a"),i("mtext",null," "),i("mi",null,"l"),i("mi",null,"s"),i("mi",null,"t"),i("msup",null,[i("mo",{accent:"false",stretchy:"false"},"→"),i("mo",{"data-mjx-alternate":"1"},"′")]),i("mi",null,"b"),i("mtext",null," "),i("mi",null,"l"),i("mi",null,"s"),i("mi",null,"t")])],-1))])]),s[24]||(s[24]=i("p",null,"This general function is a function of functions. It is on the higher-order.",-1)),s[25]||(s[25]=i("p",null,[i("code",null,"map"),t(" can even be partially applied. "),i("code",null,"map twice"),t(" is a function of type")],-1)),i("p",null,[s[5]||(s[5]=t("int list ")),i("mjx-container",k,[(n(),e("svg",p,s[3]||(s[3]=[i("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[i("g",{"data-mml-node":"math"},[i("g",{"data-mml-node":"mo"},[i("path",{"data-c":"2192",d:"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z",style:{"stroke-width":"3"}})])])],-1)]))),s[4]||(s[4]=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mo",{accent:"false",stretchy:"false"},"→")])],-1))]),s[6]||(s[6]=t(" int list"))]),s[26]||(s[26]=a(`<h3 id="map-applied-in-different-ways" tabindex="-1">Map applied in different ways <a class="header-anchor" href="#map-applied-in-different-ways" aria-label="Permalink to &quot;Map applied in different ways&quot;">​</a></h3><div class="language-OCaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">OCaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">(*anonymous function*)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> rec</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> map2</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> []</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> []</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> h</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">::</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;">t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f h </span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map2 f t;;</span></span></code></pre></div><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">(*anonymous function with pattern matching*)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> rec</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> map3</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> []</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> []</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> h</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">::</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;">t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f h </span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map3 f t;;</span></span></code></pre></div><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">(*using scopes*)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> rec</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> map4</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> []</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> []</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> h</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">::</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;">t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;"> let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> h&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f h </span><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h&#39; </span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map4 f t;;</span></span></code></pre></div><h3 id="head-recursions-and-tail-recursion" tabindex="-1">Head Recursions and Tail Recursion <a class="header-anchor" href="#head-recursions-and-tail-recursion" aria-label="Permalink to &quot;Head Recursions and Tail Recursion&quot;">​</a></h3><p>Recursion are of different types</p><ul><li><strong>head</strong>: the recursive call is the firstly performed operator.</li><li><strong>tail</strong>: the recursive call is the lastly performed operator.</li><li>Some recursions can be neither head nor tail.</li></ul><p><strong>The output must be put on the interface.</strong></p><ul><li><code>return (recursion on input)with output</code></li></ul><p><code>with</code> is the last operation.</p><ul><li><code>return recursion on (input with output)</code></li></ul><p><code>recursion</code> is the last operation.</p><h3 id="tail-map" tabindex="-1">Tail Map <a class="header-anchor" href="#tail-map" aria-label="Permalink to &quot;Tail Map&quot;">​</a></h3><p>The output for tail recursion has to be accumulated. Initially, the accumulated output is empty.</p><p><img src="https://cdn.jsdelivr.net/gh/AllenYGY/ImageSpace@main/uPic/ppCaPR.png" alt="ppCaPR"></p><p>The recursion stops if the input is empty.</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> rec</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> map_t_aux</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> f</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> acc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	[]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">acc</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> h</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">::</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;">t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map_t_aux f (acc</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f h</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)t;; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> rec</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> map_tail</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> f</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map_t_aux f </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l;;</span></span></code></pre></div><p>But this implementation is not efficient.</p>`,18)),i("ul",null,[s[16]||(s[16]=i("li",null,"@ takes O(n) time, while :: only takes O(1) time.",-1)),i("li",null,[s[11]||(s[11]=t("Then, map is ")),i("mjx-container",o,[(n(),e("svg",g,s[7]||(s[7]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1)]))),s[8]||(s[8]=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"O"),i("mo",{stretchy:"false"},"("),i("mi",null,"n"),i("mo",{stretchy:"false"},")")])],-1))]),s[12]||(s[12]=t(", but ")),s[13]||(s[13]=i("code",null,"map_tail",-1)),s[14]||(s[14]=t(" is ")),i("mjx-container",c,[(n(),e("svg",T,s[9]||(s[9]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(633,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1)]))),s[10]||(s[10]=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"O"),i("mo",{stretchy:"false"},"("),i("msup",null,[i("mi",null,"n"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mn",null,"2")])]),i("mo",{stretchy:"false"},")")])],-1))]),s[15]||(s[15]=t("."))])]),s[27]||(s[27]=a(`<div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> rec</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rev_map_aux</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> f</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> acc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> []</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">acc</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> h</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">::</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;">t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rev_map_aux f(f h</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> acc) t;; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rev_map</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> f</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rev_map_aux f </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l;;</span></span></code></pre></div><p>To reverse the order of a list, we only need to call <code>rev_map_aux</code> but let f be the identity function.</p><div class="language-OCaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">OCaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a ;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> map_tail</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> f</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rev_map_aux id </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rev_map f l);;</span></span></code></pre></div>`,3)),i("ul",null,[i("li",null,[s[19]||(s[19]=i("code",null,"map_tail",-1)),s[20]||(s[20]=t(" is ")),i("mjx-container",Q,[(n(),e("svg",F,s[17]||(s[17]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1)]))),s[18]||(s[18]=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"O"),i("mo",{stretchy:"false"},"("),i("mi",null,"n"),i("mo",{stretchy:"false"},")")])],-1))]),s[21]||(s[21]=t(" now."))]),s[22]||(s[22]=i("li",null,[i("code",null,"List.rev"),t(" is also works.")],-1))]),s[28]||(s[28]=a(`<h2 id="filter" tabindex="-1">Filter <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;Filter&quot;">​</a></h2><ul><li>Another famous higher-order function is <code>filter</code>. <ul><li><code>filter</code> takes a logical test and a list as input, and</li><li>returns the list of elements who pass the test.</li></ul></li></ul><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> rec</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> filter</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> []</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> []</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> |</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> h</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">::</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;">t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> []</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">@</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filter p t</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">;</span></span></code></pre></div><h2 id="fold" tabindex="-1">Fold <a class="header-anchor" href="#fold" aria-label="Permalink to &quot;Fold&quot;">​</a></h2><p>fold combines a list of items as one. For example, summation, concatenation, etc. Different from map and filter , programmers need to define an initial value for fold when the list is empty.</p><div class="language-OCaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">OCaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> rec</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fold</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> f</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> ini</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> []</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ini</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> h</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">::</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;">t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f h (fold f ini t);;</span></span></code></pre></div><h3 id="fold-right-and-fold-left" tabindex="-1">Fold Right and Fold Left <a class="header-anchor" href="#fold-right-and-fold-left" aria-label="Permalink to &quot;Fold Right and Fold Left&quot;">​</a></h3><h4 id="fold-right" tabindex="-1">Fold Right <a class="header-anchor" href="#fold-right" aria-label="Permalink to &quot;Fold Right&quot;">​</a></h4><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> rec</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fold_right</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> f</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> lst</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> acc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> =</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> []</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> acc</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> h</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">::</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;">t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f h (fold_right f t acc);;</span></span></code></pre></div><p>Now, <code>fold_right</code> is exactly same as the system library <code>List.fold_right</code>.</p><p><code>fold_right</code> is for the function which is right associative.</p><h4 id="fold-left" tabindex="-1">Fold Left <a class="header-anchor" href="#fold-left" aria-label="Permalink to &quot;Fold Left&quot;">​</a></h4><p>In each iteration of <code>fold_left</code></p><ul><li>the accumulation <code>acc</code> carries the result of folding first n elements from previous iterations;</li><li>the combine function <code>f</code> is applied on <code>acc</code> and <code>n + 1-th</code> element;</li><li>the result of combine is passed to the next iteration as the new <code>acc</code>, together with the tail as the new list.</li></ul><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-light-text-decoration:underline;--shiki-dark:#F97583;--shiki-dark-text-decoration:underline;">let</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> rec</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fold_left</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> f</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> acc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> []</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> acc</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	|</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> h</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> ::</span><span style="--shiki-light:#005CC5;--shiki-light-text-decoration:underline;--shiki-dark:#79B8FF;--shiki-dark-text-decoration:underline;"> t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fold_left f (f acc h) t;;</span></span></code></pre></div>`,15))])}const w=l(h,[["render",u]]);export{B as __pageData,w as default};
