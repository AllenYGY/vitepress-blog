import{_ as a,c as i,a5 as t,o}from"./chunks/framework.CHhwEXkI.js";const u=JSON.parse('{"title":"07-Main Memory","description":"","frontmatter":{"date":"2024-04-18T00:00:00.000Z","title":"07-Main Memory","status":"TOBECONTINUED","author":["AllenYGY"],"tags":["Lec7","OS","NOTE"],"created":"2024-04-18T15:14","updated":"2024-05-31T22:48","publish":true},"headers":[],"relativePath":"posts/Operating System/Lecture/07-Main Memory.md","filePath":"posts/Operating System/Lecture/07-Main Memory.md","lastUpdated":null}'),n={name:"posts/Operating System/Lecture/07-Main Memory.md"};function r(l,e,s,d,m,h){return o(),i("div",null,e[0]||(e[0]=[t('<h1 id="main-memory" tabindex="-1">Main Memory <a class="header-anchor" href="#main-memory" aria-label="Permalink to &quot;Main Memory&quot;">​</a></h1><h2 id="linking" tabindex="-1">Linking <a class="header-anchor" href="#linking" aria-label="Permalink to &quot;Linking&quot;">​</a></h2><ul><li><p><em>Static linking</em> –system libraries and program code are combined by the loader into the binary image</p></li><li><p><em>Dynamic linking</em> –linking is postponed until execution/run time</p></li></ul><h2 id="binding" tabindex="-1">Binding <a class="header-anchor" href="#binding" aria-label="Permalink to &quot;Binding&quot;">​</a></h2><h2 id="memory-management-unit-mmu" tabindex="-1">Memory-Management Unit (MMU) <a class="header-anchor" href="#memory-management-unit-mmu" aria-label="Permalink to &quot;Memory-Management Unit (MMU)&quot;">​</a></h2><h2 id="fragmentation" tabindex="-1">Fragmentation <a class="header-anchor" href="#fragmentation" aria-label="Permalink to &quot;Fragmentation&quot;">​</a></h2><h2 id="memory-allocation" tabindex="-1">Memory Allocation <a class="header-anchor" href="#memory-allocation" aria-label="Permalink to &quot;Memory Allocation&quot;">​</a></h2><h3 id="continuous-partition" tabindex="-1">Continuous Partition <a class="header-anchor" href="#continuous-partition" aria-label="Permalink to &quot;Continuous Partition&quot;">​</a></h3><h4 id="size-of-each-partition-is-fixed" tabindex="-1">Size of each partition is fixed <a class="header-anchor" href="#size-of-each-partition-is-fixed" aria-label="Permalink to &quot;Size of each partition is fixed&quot;">​</a></h4><h4 id="size-of-each-partition-is-variable" tabindex="-1">Size of each partition is variable <a class="header-anchor" href="#size-of-each-partition-is-variable" aria-label="Permalink to &quot;Size of each partition is variable&quot;">​</a></h4><h3 id="non-continuous-partition" tabindex="-1">Non-continuous Partition <a class="header-anchor" href="#non-continuous-partition" aria-label="Permalink to &quot;Non-continuous Partition&quot;">​</a></h3><h4 id="page-table" tabindex="-1">Page Table <a class="header-anchor" href="#page-table" aria-label="Permalink to &quot;Page Table&quot;">​</a></h4><h4 id="tlb" tabindex="-1">TLB <a class="header-anchor" href="#tlb" aria-label="Permalink to &quot;TLB&quot;">​</a></h4><ol><li>What is memory management?</li></ol><p>Memory management is to bind a logical address space to a separate physical address space.</p><ol start="2"><li>When does the address binding happen?</li></ol><p>Binding is delayed until run time.</p><ol start="3"><li>What is physical memory address?</li></ol><p><em>Logical address</em></p><ul><li>generated by the Program/CPU</li><li>also referred to as virtual address</li><li>all the addresses used by the CPU</li><li>Addressed in bytes</li><li>Size of space depends on the CPU bits</li></ul><ol start="4"><li>What is logical memory address?</li></ol><p><em>Physical address</em></p><ul><li>All the addresses used by the memory hardware</li><li>Addressed in bytes</li><li>Size of space depends on real size of physical memory</li></ul><ol start="5"><li>In which situation, the above two addresses are same? In which situation, the above two addresses are different?</li></ol><p>Logical and physical addresses are the <em>same</em> in</p><ul><li>**compile-time address binding **</li><li><strong>load-time address-binding schemes</strong></li></ul><p>logical (virtual) and physical addresses <em>differ</em> in</p><ul><li><strong>execution-time address-binding scheme</strong></li></ul><ol start="6"><li>What memory allocation methods are there? Advantages? Disadvantages?</li></ol><p>Memory for each process can be</p><ul><li>Contiguous (early method)</li><li>Not contiguous (modern method)</li></ul><p>• How to map the logical address to physical address?</p><p>• How to reduce time to find physical address?</p><p>• What methods are used to solve the big page table problem?</p>',34)]))}const p=a(n,[["render",r]]);export{u as __pageData,p as default};
