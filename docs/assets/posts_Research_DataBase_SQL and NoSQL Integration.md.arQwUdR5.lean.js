import{_ as a,c as i,a5 as t,o as s}from"./chunks/framework.CHhwEXkI.js";const u=JSON.parse('{"title":"An integration approach of hybrid databases based on SQL in cloud computing environment","description":"","frontmatter":{"date":"2024-07-10T00:00:00.000Z","title":"An integration approach of hybrid databases based on SQL in cloud computing environment","status":"UNFINISHED","author":["AllenYGY"],"tags":["NOTE","DataBase","NoSQL","SQL"],"publish":true},"headers":[],"relativePath":"posts/Research/DataBase/SQL and NoSQL Integration.md","filePath":"posts/Research/DataBase/SQL and NoSQL Integration.md","lastUpdated":null}'),r={name:"posts/Research/DataBase/SQL and NoSQL Integration.md"};function n(o,e,l,h,d,p){return s(),i("div",null,e[0]||(e[0]=[t(`<p>#Database #integration #NoSQL #SQL #ReadPaper</p><h1 id="mysql-and-nosql-database-comparison-for-iot-application" tabindex="-1">MySQL and NoSQL database comparison for IoT application <a class="header-anchor" href="#mysql-and-nosql-database-comparison-for-iot-application" aria-label="Permalink to &quot;MySQL and NoSQL database comparison for IoT application&quot;">​</a></h1><h2 id="contents" tabindex="-1">Contents <a class="header-anchor" href="#contents" aria-label="Permalink to &quot;Contents&quot;">​</a></h2><ul><li>What is IOT？</li><li>SQL Versus NoSQL</li><li>Experiment</li><li>SQL and NoSQL Integration</li><li>Conclusion</li></ul><h2 id="what-is-iot" tabindex="-1">What is IoT ？ <a class="header-anchor" href="#what-is-iot" aria-label="Permalink to &quot;What is IoT ？&quot;">​</a></h2><ul><li>IoT refers to any object/thing around us which is connected to internet.</li><li>This object is also able to communicate through internet.</li></ul><p>Like temperature sensor connected to oven, fridge or just to measure a room temperature. IoT is network of such things which may communicate with each other or with user.</p><p>IoT is having application in various domains like smart city, industrial, medical services, etc.</p><h2 id="sql-versus-nosql" tabindex="-1">SQL Versus NoSQL <a class="header-anchor" href="#sql-versus-nosql" aria-label="Permalink to &quot;SQL Versus NoSQL&quot;">​</a></h2><h2 id="experiment" tabindex="-1">Experiment <a class="header-anchor" href="#experiment" aria-label="Permalink to &quot;Experiment&quot;">​</a></h2><h3 id="garden-water-sprinkler-application" tabindex="-1">Garden water sprinkler application <a class="header-anchor" href="#garden-water-sprinkler-application" aria-label="Permalink to &quot;Garden water sprinkler application&quot;">​</a></h3><p>Temperature, humidity, soil moisture sensors are used in the hardware along with the water level detection.</p><p>Sprinkler motor is turned ON depending on the inputs from soil moisture and water level in the tank. If the soil moisture level drops below the threshold value and if water level is TRUE, then sprinkler motor turns ON.</p><h3 id="system-architecture" tabindex="-1">System Architecture <a class="header-anchor" href="#system-architecture" aria-label="Permalink to &quot;System Architecture&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Database/202407101124185.png" alt="System Architecture"></p><p>The data from these sensors is collected and is sent to database server and user email ID. The aim is to further utilize this data for analysis using data processing tools.</p><p>Data is stored in both MySQL and MongoDB database systems for carrying out the comparison study.</p><h3 id="database-setup" tabindex="-1">Database Setup <a class="header-anchor" href="#database-setup" aria-label="Permalink to &quot;Database Setup&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Database/202407101137755.png" alt="MySQL"></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Db.collection.insert({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	sensor_id: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sensor </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Humidity: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">humidity sensor reading</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Soil_moisture: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">moisture sensor reading</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Temperature: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">temperature sensor reading</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	CreateDate: new Date(), </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Userid: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">User </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="experiment-results" tabindex="-1">Experiment Results <a class="header-anchor" href="#experiment-results" aria-label="Permalink to &quot;Experiment Results&quot;">​</a></h3><ol><li>SELECT query with varying number of threads</li></ol><p>Here is the summary of the first two experiments from the document comparing MySQL and MongoDB databases for an IoT application:</p><h3 id="_1-select-query-with-varying-number-of-threads" tabindex="-1">1) SELECT Query with Varying Number of Threads: <a class="header-anchor" href="#_1-select-query-with-varying-number-of-threads" aria-label="Permalink to &quot;1) SELECT Query with Varying Number of Threads:&quot;">​</a></h3><p>Measure the response time of SELECT queries with varying numbers of threads.</p><ul><li><strong>Setup</strong>: The number of threads was varied from 1 to 10. Each SELECT query fetched 1000 records from a database containing 10,000 records.</li><li><strong>Results</strong>: <ul><li>For up to 4 threads, the response times for MySQL and MongoDB were similar.</li><li>At 10 threads, MongoDB showed a significant increase in response time compared to MySQL.</li><li><strong>Observation</strong>: Too many threads in MongoDB can overwhelm the system, leading to increased latency and CPU starvation.</li></ul></li></ul><h3 id="_2-insert-query-with-varying-number-of-threads" tabindex="-1">2) INSERT Query with Varying Number of Threads: <a class="header-anchor" href="#_2-insert-query-with-varying-number-of-threads" aria-label="Permalink to &quot;2) INSERT Query with Varying Number of Threads:&quot;">​</a></h3><ul><li><strong>Objective</strong>: Measure the response time for INSERT queries with varying numbers of threads.</li><li><strong>Setup</strong>: Similar to the SELECT query test, the number of threads was varied from 1 to 10.</li><li><strong>Results</strong>: <ul><li>The response time for MySQL increased at a faster rate compared to MongoDB.</li><li>MongoDB demonstrated faster performance for INSERT operations.</li><li><strong>Observation</strong>: MongoDB outperformed MySQL in write latency, making it a better choice for applications with heavy write operations.</li></ul></li></ul><p>These experiments highlight the differences in performance characteristics between MySQL and MongoDB, with MongoDB showing advantages in handling write operations under load, while MySQL maintained more stable read performance with higher thread counts.</p><ol start="2"><li>INSERT query with varying number of threads</li><li>SELECT query with varying number of records</li><li>INSERT query with varying number of records</li></ol><p>Each database has its own advantages and disadvantages.</p><ul><li>MongoDB showed less response time in some scenarios compared to MySQL.</li><li>MySQL responses were more stable compared to MongoDB.</li></ul><h2 id="sql-and-nosql-integration" tabindex="-1">SQL and NoSQL Integration <a class="header-anchor" href="#sql-and-nosql-integration" aria-label="Permalink to &quot;SQL and NoSQL Integration&quot;">​</a></h2><ul><li>SQL + X[NoSQL] <ul><li>Redis+MySQL As a <strong>Caching Layer</strong> for MySQL</li></ul></li><li>Hybrid Database <ul><li>MSI Architecture</li></ul></li></ul><h3 id="mysql-redis-caching-layer" tabindex="-1">MySQL + Redis <strong>Caching Layer</strong> <a class="header-anchor" href="#mysql-redis-caching-layer" aria-label="Permalink to &quot;MySQL + Redis  **Caching Layer**&quot;">​</a></h3><p><strong>Scenario</strong>: Improve read performance and reduce database load.</p><p><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Database/202407101217920.png" alt="Redis"></p><ul><li><strong>MySQL</strong>: Serves as the primary persistent data storage, handling complex queries and transactions.</li><li><strong>Redis</strong>: Acts as a caching layer, storing frequently accessed or common data such as user sessions and popular product information.</li></ul><p><strong>Example</strong>: When a user requests data, the application first checks the Redis cache. If the data is found in the cache, it is returned immediately. If not, the data is fetched from MySQL, then stored in Redis for future requests. This approach reduces the load on MySQL and improves the overall response time of the application.</p><div class="info custom-block github-alert"><p class="custom-block-title">+ 缓存层</p><p></p><p>场景：提高读性能，减少数据库负载。</p><ul><li>MySQL：作为主要的持久化数据存储，处理复杂的查询和事务。</li><li>Redis：作为缓存层，存储常用或频繁访问的数据，如用户会话、热门商品信息等。</li></ul></div><h3 id="hybrid-database" tabindex="-1">Hybrid Database <a class="header-anchor" href="#hybrid-database" aria-label="Permalink to &quot;Hybrid Database&quot;">​</a></h3><p>MSI mainly includes eight components</p><ul><li>API dispatcher</li><li>SQL parser</li><li>SQL optimizer</li><li>SQL router</li><li>SQL executor</li><li>DBMS adapter</li><li>Result merger</li><li>Meta-data management</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/Database/202407101200521.png" alt="MSI Architecture"></p><ul><li>The MSI&#39;s input and the result of the SQL process is the MSI&#39;s output.</li></ul><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><ul><li>SQL and NoSQL databases offer unique sets of capabilities and advantages.</li><li>The key to successful integration lies in understanding the intrinsic properties of each database type and crafting a strategy tailored to the specific needs of the organization.</li></ul><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><ul><li><a href="https://doi.org/10.1002/spe.2666" target="_blank" rel="noreferrer">An integration approach of hybrid databases based on SQL in cloud computing environment</a></li><li><a href="https://www.lonti.com/blog/integration-strategies-between-sql-and-nosql-databases" target="_blank" rel="noreferrer">Integration Strategies Between SQL and NoSQL Databases</a></li><li><a href="https://www.softwaretestinghelp.com/hybrid-database/" target="_blank" rel="noreferrer">What Is Hybrid Database? List Of The Best Hybrid Databases</a></li><li><a href="https://medium.com/@gouri.benni/an-overview-on-a-hybrid-database-approach-using-graph-and-relational-database-fb216e0a24f1" target="_blank" rel="noreferrer">An Overview on “A Hybrid Database Approach Using Graph and Relational Database”</a></li><li><a href="https://ieeexplore.ieee.org/document/7887957" target="_blank" rel="noreferrer">MySQL and NoSQL database comparison for IoT application</a></li></ul>`,49)]))}const g=a(r,[["render",n]]);export{u as __pageData,g as default};
