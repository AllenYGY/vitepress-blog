import{_ as o,c as i,a5 as l,o as r}from"./chunks/framework.CHhwEXkI.js";const d=JSON.parse('{"title":"01-TOC-Intro","description":"","frontmatter":{"date":"2024-11-17T00:00:00.000Z","title":"01-TOC-Intro","status":"DONE","author":["AllenYGY"],"tags":["NOTE","TOC"],"descriptions":"Theory Of Computation Introduction---A brief introduction to the history of mathematical logic and computer science.","publish":true},"headers":[],"relativePath":"posts/Theory Of Computation/Lecture/01-TOC-Intro.md","filePath":"posts/Theory Of Computation/Lecture/01-TOC-Intro.md","lastUpdated":null}'),e={name:"posts/Theory Of Computation/Lecture/01-TOC-Intro.md"};function a(n,t,s,u,c,h){return r(),i("div",null,t[0]||(t[0]=[l('<h1 id="toc-intro" tabindex="-1">TOC-Intro <a class="header-anchor" href="#toc-intro" aria-label="Permalink to &quot;TOC-Intro&quot;">​</a></h1><div class="info custom-block github-alert"><p class="custom-block-title">+ Computation Definition</p><p>A <strong>computation</strong> is a <strong>procedure</strong> to calculate the desired output of a computational problem.</p></div><p>If only solve decision problems, a computation is a procedure to decide whether an element is in a set or not.</p><h2 id="history" tabindex="-1">History <a class="header-anchor" href="#history" aria-label="Permalink to &quot;History&quot;">​</a></h2><p>Gottfried Wilhelm Leibniz <em>1646-1716</em></p><ul><li>Calculus ratiocinator: a theoretical universal logical calculation framework</li><li>Characteristica universalis: a universal conceptual language</li></ul><p>Gottlob Frege <em>1848-1925</em></p><ul><li>Begriffsschrift: (concept-script) <ul><li>First book on symbolic logical</li><li>To implement calculus ratiocinator</li></ul></li></ul><p>Kurt Gödel <em>1906–1978</em></p><ul><li>Incompleteness theorem: if an axiom system contains natural numbers, then <ol><li>there is a proposition which is unprovable;</li><li>and it cannot prove its consistency.</li></ol></li><li>Sabota g ed Hilbert’s program</li></ul><p>Alonzo Church <em>1903-1995</em></p><ul><li>Lambda calculus</li></ul><p>Alan Turing <em>1912-1954</em></p><ul><li>Turing machine</li></ul><p>这段历史概述了数学逻辑与计算机科学发展的几个关键人物及其贡献，涉及从17世纪到20世纪的重要理论基础。这些贡献共同构建了现代逻辑学、数学以及计算机科学的基础，以下是逐步的介绍：</p><h3 id="_1-gottfried-wilhelm-leibniz-1646-1716" tabindex="-1">1. <strong>Gottfried Wilhelm Leibniz (1646-1716)</strong> <a class="header-anchor" href="#_1-gottfried-wilhelm-leibniz-1646-1716" aria-label="Permalink to &quot;1. **Gottfried Wilhelm Leibniz (1646-1716)**&quot;">​</a></h3><p>莱布尼茨是一位德国哲学家、数学家，被认为是现代数学逻辑的奠基人之一。他的两项核心构想对后来的逻辑发展产生了深远影响：</p><ul><li><strong>Calculus ratiocinator</strong>（理性演算器）：一个假设性的通用逻辑计算框架，旨在通过数学和逻辑计算解决一切问题。</li><li><strong>Characteristica universalis</strong>（通用特征语言）：一种理想化的通用概念语言，试图以形式化的方式表达所有知识。这是莱布尼茨对人类知识进行逻辑编码的梦想，也是后来形式逻辑的前身。</li></ul><p>尽管莱布尼茨的构想在他在世时未能实现，但它为后来的逻辑学家提供了启发。</p><hr><h3 id="_2-gottlob-frege-1848-1925" tabindex="-1">2. <strong>Gottlob Frege (1848-1925)</strong> <a class="header-anchor" href="#_2-gottlob-frege-1848-1925" aria-label="Permalink to &quot;2. **Gottlob Frege (1848-1925)**&quot;">​</a></h3><p>弗雷格是德国逻辑学家，被称为现代逻辑学的奠基人之一。他的主要贡献体现在：</p><ul><li><strong>Begriffsschrift</strong>（概念文字）：这是第一本关于符号逻辑的书，首次提出了一种形式化的逻辑语言，用以表达数学和逻辑推理。这一理论直接落实了莱布尼茨“理性演算器”的思想，是现代形式逻辑的起点。</li><li>他还发展了谓词逻辑，为数学基础提供了更加严谨的框架。</li></ul><p>弗雷格的工作直接影响了后来的逻辑学家，包括罗素和维特根斯坦。</p><hr><h3 id="_3-kurt-godel-1906–1978" tabindex="-1">3. <strong>Kurt Gödel (1906–1978)</strong> <a class="header-anchor" href="#_3-kurt-godel-1906–1978" aria-label="Permalink to &quot;3. **Kurt Gödel (1906–1978)**&quot;">​</a></h3><p>哥德尔是奥地利逻辑学家，以他的<strong>不完备性定理</strong>闻名，该定理对数学和逻辑的基础提出了深刻的限制：</p><ul><li><strong>不完备性定理</strong>指出：在任何包含自然数的公理系统中： <ol><li>存在一个无法被证明也无法被否定的命题（即“不可判定命题”）。</li><li>这个系统无法证明自身的相容性。</li></ol></li><li>哥德尔的工作揭示了数学体系的固有局限性，破坏了希尔伯特“证明数学一致性”的乐观计划（Sabotaged Hilbert’s program）。</li></ul><p>哥德尔的理论对数理逻辑和理论计算机科学产生了重大影响。</p><hr><h3 id="_4-alonzo-church-1903-1995" tabindex="-1">4. <strong>Alonzo Church (1903-1995)</strong> <a class="header-anchor" href="#_4-alonzo-church-1903-1995" aria-label="Permalink to &quot;4. **Alonzo Church (1903-1995)**&quot;">​</a></h3><p>丘奇是美国数学家，他的<strong>λ演算</strong>（Lambda Calculus）为计算理论奠定了重要基础：</p><ul><li><strong>λ演算</strong>是一种数学形式系统，用以研究函数定义和计算过程。它与图灵机被认为是等价的，提供了描述计算过程的一种抽象方法。</li><li>丘奇证明了一些问题在形式系统中是不可判定的，这与哥德尔的结果相辅相成。</li></ul><p>λ演算后来成为编程语言理论的重要基础。</p><hr><h3 id="_5-alan-turing-1912-1954" tabindex="-1">5. <strong>Alan Turing (1912-1954)</strong> <a class="header-anchor" href="#_5-alan-turing-1912-1954" aria-label="Permalink to &quot;5. **Alan Turing (1912-1954)**&quot;">​</a></h3><p>图灵是英国数学家、逻辑学家，被誉为计算机科学之父。他的贡献主要包括：</p><ul><li><strong>图灵机</strong>：一种假想的计算设备，旨在模拟任何可计算过程。这一模型定义了“可计算性”的概念，被认为是现代计算机的理论基础。</li><li>图灵与哥德尔、丘奇的研究共同确立了计算理论的基本框架。</li></ul><p>图灵还提出了“图灵测试”，作为人工智能的早期概念。</p>',39)]))}const g=o(e,[["render",a]]);export{d as __pageData,g as default};
