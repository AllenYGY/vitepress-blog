import{_ as i,c as l,a5 as t,o as a}from"./chunks/framework.CHhwEXkI.js";const m=JSON.parse('{"title":"09-File System Interface","description":"","frontmatter":{"date":"2024-05-11T00:00:00.000Z","title":"09-File System Interface","status":"DONE","author":["AllenYGY"],"tags":["OS","FileSystem","NOTE"],"created":"2024-05-11T14:08","updated":"2024-06-11T01:14","publish":true},"headers":[],"relativePath":"posts/Operating System/Lecture/09-File System Interface.md","filePath":"posts/Operating System/Lecture/09-File System Interface.md","lastUpdated":null}'),r={name:"posts/Operating System/Lecture/09-File System Interface.md"};function o(s,e,n,c,u,d){return a(),l("div",null,e[0]||(e[0]=[t('<h1 id="file-system-interface" tabindex="-1">File System Interface <a class="header-anchor" href="#file-system-interface" aria-label="Permalink to &quot;File System Interface&quot;">​</a></h1><blockquote><p>[!abstract]+ File System Interface</p><ul><li>File Concept</li><li>Access Methods</li><li>Disk and Directory Structure</li><li>File System Mounting</li><li>File Sharing</li><li>Protection</li></ul></blockquote><h2 id="file" tabindex="-1">File <a class="header-anchor" href="#file" aria-label="Permalink to &quot;File&quot;">​</a></h2><blockquote><p>[!question]+ What is File?</p><ol><li>A named collection of related information that is recorded on secondary storage.</li></ol><ul><li>(e.g. Disk, SSD, Flash, etc.)</li></ul><ol start="2"><li>A sequence of bits, bytes, lines, or records</li></ol><ul><li>the meaning of which is defined by the file’s creator</li></ul><ol start="3"><li>Smallest logical storage unit for user view</li></ol></blockquote><div class="tip custom-block github-alert"><p class="custom-block-title">+ File Property</p><p></p><ul><li><em>Contiguous</em> logical address space</li><li>Represents <em>programs or data</em></li></ul></div><blockquote><p>[!success]+ File system resides on secondary storage (disks)</p><ul><li>Provides user interface to storage, mapping logical to physical.</li><li>Provides efficient and convenient access to disk by allowing data to be stored, located, retrieved easily.</li></ul></blockquote><h3 id="file-attributes" tabindex="-1">File Attributes <a class="header-anchor" href="#file-attributes" aria-label="Permalink to &quot;File Attributes&quot;">​</a></h3><blockquote><p>[!abstract]+ File attributes</p><ul><li>Name – only information kept in human-readable form</li><li>Identifier – unique tag (number) identifies file within file system</li><li>Type – needed for systems that support different types</li><li>Location – pointer to file location on device</li><li>Size – current file size</li><li>Protection – controls who can do reading, writing, executing</li><li>Time, date, and user identification – data for protection, security, and usage monitoring</li></ul></blockquote><ul><li>Information about files <em>metadata</em> are kept in the directory structure, which is maintained on the disk</li></ul><h3 id="file-operation" tabindex="-1">File Operation <a class="header-anchor" href="#file-operation" aria-label="Permalink to &quot;File Operation&quot;">​</a></h3><blockquote><p>[!abstract]+ Basic File Operations</p><ol><li>Create a file</li><li>Write a file</li><li>Read a file</li><li>Reposition within a file</li><li>Truncate a file^[截断文件的操作通常用于快速清空文件内容而不删除文件本身，这在需要保留文件但不需要其内容的场景中非常有用。例如，日志文件管理中，当日志文件达到一定大小需要被清空重写时，可以使用截断操作来实现。]</li></ol><ul><li>File is reset to length zero <ul><li>当一个文件被截断时，其内容被清空，文件的长度被重置为零。这意味着文件中原有的所有数据都将被删除。</li></ul></li><li>File space is released <ul><li>截断文件后释放的空间指的是之前文件内容所占用的存储空间被系统回收。这样可以提高存储效率，为其他文件或数据释放空间。</li></ul></li><li>File attributes are unchanged <ul><li>尽管文件的内容和大小发生了改变，文件的属性（如修改时间、访问权限等）保持不变。这意味着文件的元数据，除了与文件大小相关的部分，不会因为截断操作而受到影响。</li></ul></li></ul><ol start="6"><li>Delete a file</li></ol></blockquote><blockquote><p>Except file creation and deletion, all other operations need to <em>open</em> the file <em>first</em> and then <em>close</em> the file <em>after</em> the operation</p></blockquote><h3 id="file-locking" tabindex="-1">File Locking <a class="header-anchor" href="#file-locking" aria-label="Permalink to &quot;File Locking&quot;">​</a></h3><ul><li>Lock of file is provided by some operating systems</li><li><em>Similar to reader writer locks</em></li></ul><blockquote><p>[!abstract]+ Two Kinds of Lock <strong>Shared lock</strong></p><ul><li><em>Similar to reader lock</em></li><li>Several processes can acquire concurrently</li></ul><p><strong>Exclusive lock</strong></p><ul><li><em>Similar to writer lock</em></li><li><em>Mandatory lock</em><ul><li>Once a process acquires an exclusive lock, the operating system will prevent any other process from accessing the locked file <ul><li>Windows</li></ul></li></ul></li><li><em>Advisory lock</em><ul><li>it is up to software developers to ensure that locks are appropriately acquired and released <ul><li>Unix/Linux</li></ul></li></ul></li></ul></blockquote><h3 id="file-types" tabindex="-1">File Types <a class="header-anchor" href="#file-types" aria-label="Permalink to &quot;File Types&quot;">​</a></h3><p><strong>The OS uses the extension to indicate the type of the file.</strong></p><blockquote><p>[!example]- Most common types</p><ul><li>.c</li><li>.exe</li><li>.docx</li><li>.pdf</li><li>.jpg</li><li>.png</li><li>.zip</li></ul></blockquote><h2 id="file-access-methods" tabindex="-1">File Access Methods <a class="header-anchor" href="#file-access-methods" aria-label="Permalink to &quot;File Access Methods&quot;">​</a></h2><ul><li>Sequential Access</li><li>Direct/Random Access</li></ul><blockquote><p>[!abstract]+ Access Methods</p><ul><li>Sequential Access <ul><li>Commands <ul><li>read_next</li><li>write_next</li><li>reset (to the beginning)</li></ul></li></ul></li><li>Direct/Random Access <ul><li>Commands <ul><li>read next</li><li>write next</li><li>read n</li><li>write n</li><li>position to n</li><li>rewrite n</li></ul></li></ul></li></ul><p><em>n = an index relative to the beginning of the file</em></p><ul><li>Index and Relative Files <ul><li>Keep index in memory for fast determination of location of data to be operated on <ul><li>E.g., VMS OS</li></ul></li></ul></li></ul></blockquote><h2 id="directory-and-disk-structure" tabindex="-1">Directory and Disk Structure <a class="header-anchor" href="#directory-and-disk-structure" aria-label="Permalink to &quot;Directory and Disk Structure&quot;">​</a></h2><h3 id="directory-structure" tabindex="-1">Directory Structure <a class="header-anchor" href="#directory-structure" aria-label="Permalink to &quot;Directory Structure&quot;">​</a></h3><p><strong>A directory structure (per file system) is used to organize the files</strong></p><p><em>Both the directory structure and the files reside on disk</em></p><h3 id="disk-structure" tabindex="-1">Disk Structure <a class="header-anchor" href="#disk-structure" aria-label="Permalink to &quot;Disk Structure&quot;">​</a></h3><ul><li>Drive <em>驱动器</em></li><li>Partition <em>分区</em></li><li>Volume <em>卷</em></li></ul><h3 id="drive" tabindex="-1">Drive <a class="header-anchor" href="#drive" aria-label="Permalink to &quot;Drive&quot;">​</a></h3><ul><li>A drive is a physical block disk.</li><li>A drive can be subdivided into several logic block disks (partitions)</li></ul><h3 id="partition" tabindex="-1">Partition <a class="header-anchor" href="#partition" aria-label="Permalink to &quot;Partition&quot;">​</a></h3><ul><li>Disk or partition can be used raw <ul><li>i.e., without a file system</li></ul></li><li>Partition can be formatted with a file system (cooked) <ul><li>Root partition contains the OS kernel, and other system files</li><li>Other partitions can hold other <code>OSes</code>, other file systems, or be raw.</li></ul></li></ul><h3 id="volume" tabindex="-1">Volume <a class="header-anchor" href="#volume" aria-label="Permalink to &quot;Volume&quot;">​</a></h3><ul><li>A volume is a single accessible storage area with a single file system, a volume can contain multiple partitions</li></ul><h3 id="file-system-types" tabindex="-1">File system types <a class="header-anchor" href="#file-system-types" aria-label="Permalink to &quot;File system types&quot;">​</a></h3><ul><li>General-purpose file systems <ul><li>Mostly used, like Windows</li></ul></li><li>Special-purpose file systems <ul><li>Solaris’s contract file system</li></ul></li></ul><div class="tip custom-block github-alert"><p class="custom-block-title">+ Basic operations</p><p></p><ul><li>Search for a file</li><li>Create a file</li><li>Delete a file</li><li>List a directory</li><li>Rename a file</li><li>Traverse the file system</li></ul></div><p><strong>The directory is organized logically to obtain</strong></p><ul><li>Efficient location of a files</li><li>Naming convenient to users <ul><li>Two files in different directories can have the same name</li><li>The same file can have several different names</li></ul></li><li>Grouping of files with similar properties <ul><li>put photos in a directory</li></ul></li></ul><h3 id="directory-organization" tabindex="-1">Directory organization <a class="header-anchor" href="#directory-organization" aria-label="Permalink to &quot;Directory organization&quot;">​</a></h3><ul><li>Single level directory</li><li>Two-level directory</li><li>Tree-structured directories</li><li>Acyclic graph directories</li></ul><h4 id="tree-structured-directories" tabindex="-1">Tree Structured directories <a class="header-anchor" href="#tree-structured-directories" aria-label="Permalink to &quot;Tree Structured directories&quot;">​</a></h4><p>Tree structures is a tree of arbitrary height, mostly common directory structure</p><ul><li>It allows users to create their own subdirectories and to organize their files accordingly.</li><li>Advantages <ul><li>Efficient searching</li><li>Grouping capability</li></ul></li></ul><h4 id="acyclic-graph-directories" tabindex="-1">Acyclic-Graph Directories <a class="header-anchor" href="#acyclic-graph-directories" aria-label="Permalink to &quot;Acyclic-Graph Directories&quot;">​</a></h4><ul><li>A tree structure prohibits the sharing of files or directories.</li><li>An acyclic graph (a graph with no cycles) allows directories to share subdirectories and files</li><li>A file may have multiple different path names</li><li>Some <code>OSes</code> simply do not allow shared directories or links</li></ul><blockquote><p>[!question]+ How do we guarantee no cycles?</p><ol><li><p>Allow only links to file not subdirectories</p></li><li><p>Every time a new link is added, use a cycle detection algorithm to determine whether it is OK. Very expensive.</p></li></ol></blockquote><h2 id="file-system-mounting" tabindex="-1">File System Mounting <a class="header-anchor" href="#file-system-mounting" aria-label="Permalink to &quot;File System Mounting&quot;">​</a></h2><ul><li>A file system must be mounted before it can be accessed</li><li>An unmounted file system can be mounted at a mount point</li><li>The amount point must be an empty directory <ul><li>i.e., original file system at the mount point must be removed if exists</li></ul></li></ul><h2 id="file-sharing" tabindex="-1">File Sharing <a class="header-anchor" href="#file-sharing" aria-label="Permalink to &quot;File Sharing&quot;">​</a></h2><ul><li>A file can be shared by multiple users</li><li>Access might be protected</li><li>The owner of a file is the user who can change attributes and grant access and who has the most control over the file.</li><li>The group attribute defines a subset of users who can share access to the file § The owner and group IDs of a given file (or directory) are stored as part of file attributes <ul><li>User IDs identify users, allowing permissions and protections for a user</li><li>Group IDs allow users to be in groups, permitting group access rights</li></ul></li></ul><h2 id="file-protection" tabindex="-1">File Protection <a class="header-anchor" href="#file-protection" aria-label="Permalink to &quot;File Protection&quot;">​</a></h2><ul><li><p>When information is stored in a computer system, we want to keep it safe from physical damage (the issue of reliability) and improper access (the issue of protection)</p></li><li><p>File owner/creator should be able to control:</p><ul><li>what can be done</li><li>by whom</li></ul></li><li><p>Types of access</p><ul><li>Read: Read from the file.</li><li>Write: Write or rewrite the file.</li><li>Execute: Load the file into memory and execute it.</li><li>Append: Write new information at the end of the file.</li><li>Delete: Delete the file and free its space for possible reuse.</li><li>List: List the name and attributes of the file</li></ul></li><li><p>Other operations, such as renaming, copying, and editing the file, are high levels, done through read, write access.</p></li></ul><h3 id="access-lists-and-groups" tabindex="-1">Access Lists and Groups <a class="header-anchor" href="#access-lists-and-groups" aria-label="Permalink to &quot;Access Lists and Groups&quot;">​</a></h3><ul><li>Each file and directory has an access-control list (ACL)</li><li>lists user names and the types of access allowed for each user.</li><li>Three modes of access <ul><li>Read (R),</li><li>Write (W)</li><li>Execute (X)</li></ul></li><li>The UNIX system defines three fields (owner, group, public) of three bits (RWX)</li><li>Three classes of users on Unix / Linux</li></ul><p>Three classes of users on Unix / Linux RWX creator</p><ul><li>Owner access 7 111</li><li>Group access 6 110</li><li>Public access 1 001</li></ul><h3 id="remote-file-sharing" tabindex="-1">Remote File Sharing <a class="header-anchor" href="#remote-file-sharing" aria-label="Permalink to &quot;Remote File Sharing&quot;">​</a></h3><div class="info custom-block github-alert"><p class="custom-block-title">+ Four implementation methods for remote file sharing</p><p></p><ul><li>Manually transferring files between machines via programs like ftp (file transfer protocol) 4 both anonymous and authenticated access</li><li>Use a distributed fil system (DFS), in which remote directories are visible from a local machine 4 tighter integration between the machine</li><li>The World Wide Web, is a reversion to the first. Use a browser to gain access to the remote files, and separate operations (essentially a wrapper for ftp) 4 anonymous access</li><li>Cloud computing 4 delivers computing, storage, and even applications as a service across a network.</li></ul></div>',58)]))}const p=i(r,[["render",o]]);export{m as __pageData,p as default};
