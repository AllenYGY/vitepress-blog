import{_ as a,c as t,a5 as i,o as e}from"./chunks/framework.CHhwEXkI.js";const h=JSON.parse('{"title":"AVL","description":"","frontmatter":{"date":"2024-02-28T00:00:00.000Z","title":"AVL","author":["AllenYGY"],"status":"DONE","tags":["NOTE","DataStructure","AVL","Algorithm"],"created":"2024-01-16T00:00:00.000Z","updated":"2024-05-31T00:57","publish":true},"headers":[],"relativePath":"posts/Algorithm/DSA/AVL.md","filePath":"posts/Algorithm/DSA/AVL.md","lastUpdated":null}'),o={name:"posts/Algorithm/DSA/AVL.md"};function r(n,l,u,s,c,d){return e(),t("div",null,l[0]||(l[0]=[i('<h1 id="avl" tabindex="-1">AVL <a class="header-anchor" href="#avl" aria-label="Permalink to &quot;AVL&quot;">​</a></h1><ul><li>二叉搜索树，在插入和删除时可能失衡</li><li>如在插入和删除时旋转，始终令其保持平衡，则成为自平衡点二叉搜索树</li><li>AVL是自平衡二叉搜索树的实现之一</li></ul><h2 id="unbalance-situation" tabindex="-1">Unbalance Situation <a class="header-anchor" href="#unbalance-situation" aria-label="Permalink to &quot;Unbalance Situation&quot;">​</a></h2><ul><li>LL <em>一次右旋</em><ul><li>失衡节点左边高</li><li>失衡节点左孩子左边高</li></ul></li><li>LR <em>失衡节点左子树左旋，再右旋</em><ul><li>失衡节点左边高</li><li>失衡节点左孩子右边高</li></ul></li><li>RL <em>失衡节点右子树右旋，再左旋</em><ul><li>失衡节点右边高</li><li>失衡节点右孩子左边高</li></ul></li><li>RR <em>一次左旋</em><ul><li>失衡节点右边高</li><li>失衡节点右孩子右边高</li></ul></li></ul>',4)]))}const A=a(o,[["render",r]]);export{h as __pageData,A as default};
