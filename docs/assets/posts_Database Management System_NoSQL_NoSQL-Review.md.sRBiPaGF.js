import{_ as i,c as t,a5 as a,o as l}from"./chunks/framework.CHhwEXkI.js";const g=JSON.parse('{"title":"NoSQL-Assignment","description":"","frontmatter":{"date":"2024-07-04T00:00:00.000Z","title":"NoSQL-Assignment","status":"DONE","author":["AllenYGY"],"tags":["Assignment","NoSQL","DataBase"],"publish":true},"headers":[],"relativePath":"posts/Database Management System/NoSQL/NoSQL-Review.md","filePath":"posts/Database Management System/NoSQL/NoSQL-Review.md","lastUpdated":null}'),e={name:"posts/Database Management System/NoSQL/NoSQL-Review.md"};function n(h,s,r,p,k,o){return l(),t("div",null,s[0]||(s[0]=[a(`<p>#NoSQL #Assignment #Neo4j #Mongodb</p><h1 id="nosql-review" tabindex="-1">NoSQL-Review <a class="header-anchor" href="#nosql-review" aria-label="Permalink to &quot;NoSQL-Review&quot;">​</a></h1><h2 id="什么是-nosql-数据库" tabindex="-1">什么是 NoSQL 数据库 ？ <a class="header-anchor" href="#什么是-nosql-数据库" aria-label="Permalink to &quot;什么是 NoSQL 数据库 ？&quot;">​</a></h2><ul><li>NoSQL数据库是一种<em>非关系型数据库</em>，它不遵循传统的关系数据库管理系统（RDBMS）的结构。</li><li>NoSQL数据库的设计初衷是为了解决<em>大规模数据集的存储和检索问题</em>，特别是在<em>分布式环境</em>中。</li><li>NoSQL数据库适用于需要<em>处理大量数据、高吞吐量和灵活数据模型</em>的应用程序，例如大数据应用、实时分析、内容管理系统等。</li></ul><h2 id="nosql数据库有哪些类型-请列举并简要介绍其中几种" tabindex="-1">NoSQL数据库有哪些类型？请列举并简要介绍其中几种 <a class="header-anchor" href="#nosql数据库有哪些类型-请列举并简要介绍其中几种" aria-label="Permalink to &quot;NoSQL数据库有哪些类型？请列举并简要介绍其中几种&quot;">​</a></h2><ul><li><p>键值存储（<em>Key-Value Stores</em>）:</p><ul><li>这种类型的数据库通过<em>键值对</em>来存储数据，<em>键是唯一的</em>，用于检索值。</li><li>例子：Redis, Riak</li></ul></li><li><p>文档存储（<em>Document Stores</em>）：</p><ul><li>文档存储数据库存储类似于<em>JSON</em>或<em>XML</em>的文档，这些文档可以包含<em>多种数据类型和结构</em>。 <ul><li>例子：MongoDB, CouchDB</li></ul></li></ul></li><li><p>列存储（<em>Column Stores</em>）：</p><ul><li>列存储数据库将数据存储在列中，而不是行，这使得它们非常适合<em>处理大量的写入操作和列查询</em>。</li><li>例子：<em>Cassandra, HBase</em></li></ul></li><li><p>图形数据库（<em>Graph Databases</em>）：</p><ul><li>图形数据库用于存储实体之间的关系，非常适合社交网络、推荐系统等需要处理复杂关系的应用。</li><li>例子：<em>Neo4j, OrientDB</em></li></ul></li></ul><h2 id="请解释关系型数据库与-nosql-数据库之间的主要区别" tabindex="-1">请解释关系型数据库与 NoSQL 数据库之间的主要区别 <a class="header-anchor" href="#请解释关系型数据库与-nosql-数据库之间的主要区别" aria-label="Permalink to &quot;请解释关系型数据库与 NoSQL 数据库之间的主要区别&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;"><strong>类别</strong></th><th style="text-align:center;"><strong>关系型数据库（RDBMS）</strong></th><th style="text-align:center;"><strong>NoSQL数据库</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>数据模型</strong></td><td style="text-align:center;">基于关系模型，数据以表格形式存储，表格由行和列组成，通过外键与其他表格建立关系。</td><td style="text-align:center;">不基于关系模型，数据存储方式多样，如键值对、文档、列或图形。</td></tr><tr><td style="text-align:center;"><strong>模式Schema</strong></td><td style="text-align:center;">需要预先定义模式，数据结构固定，对数据的变更需要修改模式。</td><td style="text-align:center;">通常不需要预先定义模式，数据结构灵活，易于适应数据的变化。</td></tr><tr><td style="text-align:center;"><strong>扩展性</strong></td><td style="text-align:center;">扩展性有限，通常通过垂直扩展（增加单个服务器的资源）来提升性能。</td><td style="text-align:center;">设计之初就考虑了水平扩展，通过增加更多的服务器来提升性能和存储能力。</td></tr><tr><td style="text-align:center;"><strong>一致性</strong></td><td style="text-align:center;">通常遵循ACID原则（原子性、一致性、隔离性、持久性），保证事务的强一致性。</td><td style="text-align:center;">通常遵循CAP理论，提供最终一致性，牺牲一定的一致性以获得更好的可用性和分区容错性。</td></tr><tr><td style="text-align:center;"><strong>查询语言</strong></td><td style="text-align:center;">使用SQL（结构化查询语言）进行数据查询和操作。</td><td style="text-align:center;">使用自定义的查询语言或API，不是SQL。</td></tr><tr><td style="text-align:center;"><strong>事务处理</strong></td><td style="text-align:center;">支持复杂的事务处理，包括多表事务。</td><td style="text-align:center;">事务处理能力有限，许多NoSQL数据库不支持跨文档或跨键的事务。</td></tr><tr><td style="text-align:center;"><strong>数据存储</strong></td><td style="text-align:center;">数据存储在单一的数据库服务器上，通常使用B树或其他索引结构来优化查询。</td><td style="text-align:center;">数据可能分布在多个服务器上，根据其类型使用不同的存储和索引机制。</td></tr><tr><td style="text-align:center;"><strong>使用场景</strong></td><td style="text-align:center;">适用于需要复杂查询、事务处理和数据一致性的应用，如金融、会计系统。</td><td style="text-align:center;">适用于需要高扩展性、处理大量非结构化数据或快速迭代开发的应用，如大数据分析、实时推荐系统。</td></tr><tr><td style="text-align:center;"><strong>性能</strong></td><td style="text-align:center;">在小规模数据集上提供高性能，但在大规模数据集上可能遇到性能瓶颈。</td><td style="text-align:center;">在大规模数据集上提供高性能，但在小规模数据集上可能不如关系型数据库高效。</td></tr></tbody></table><ul><li>关系型数据库 <ul><li>中心化的</li><li>处理密集，结构化的数据</li><li>满足 ACID 性</li><li>遵循 CA 原则</li></ul></li><li>NoSQL <ul><li>去中心化的</li><li>处理稀疏数据，半/非结构化的数据</li><li>主要是查询，很少更新</li><li>满足 BASE 性</li><li>遵循 AP 或 CP 原则</li></ul></li></ul><h2 id="请解释-cap-定理-并说明它在-nosql数据库中的重要性" tabindex="-1">请解释 CAP 定理，并说明它在 NoSQL数据库中的重要性 <a class="header-anchor" href="#请解释-cap-定理-并说明它在-nosql数据库中的重要性" aria-label="Permalink to &quot;请解释 CAP 定理，并说明它在 NoSQL数据库中的重要性&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">+ CAP定理，也称为布鲁尔定理（Brewer&#39;s theorem）</p><p>是由计算机科学家埃里克·布鲁尔在2000年提出的一个概念，用来描述分布式系统在设计时需要做出的权衡。</p></div><div class="info custom-block github-alert"><p class="custom-block-title">+ 一致性（Consistency）</p><p>在分布式系统中，当一个数据项更新后，所有节点应保证对该数据项的读取都将得到更新后的值。也就是说，如果一个节点更新了数据，其他节点在读取时也应该得到这个最新的数据。</p></div><div class="info custom-block github-alert"><p class="custom-block-title">+ 可用性（Availability）</p><p>系统在任何时候都能够响应客户端的请求。即使在部分节点失败的情况下，系统仍然能够提供服务。</p></div><div class="info custom-block github-alert"><p class="custom-block-title">+ 分区容错性（Partition Tolerance）</p><p>系统在网络分区（即网络中的一部分节点无法与其他节点通信）的情况下仍然能够继续运行。</p></div><div class="tip custom-block github-alert"><p class="custom-block-title">+ CAP 定理 - 最多可以处理三个属性中的两个属性</p><p>CAP定理的核心观点是，在任何给定时间，一个分布式系统最多只能同时满足上述三个特性中的两个。这意味着设计者必须在这三个特性中做出选择：</p><ul><li><em>CA</em>: 如果选择一致性和可用性，系统将无法容忍网络分区，一旦发生分区，系统将无法继续服务。<em><strong>SQL</strong></em></li><li><em>CP</em>: 如果选择一致性和分区容错性，系统在网络分区的情况下将<strong>无法保证所有请求都能得到响应</strong>。 <em><strong>MongoDB, HBase, Redis</strong></em></li><li><em>AP</em>: 如果选择可用性和分区容错性，系统将无法保证在所有节点上数据的一致性，可能会采用<strong>最终一致性</strong>模型。 <em><strong>CouchBD, Cassandra, DynamoDB, Riak</strong></em></li></ul></div><blockquote><p>[!success]+ 在NoSQL数据库中，CAP定理的重要性体现在：</p><ul><li>设计决策： <ul><li>NoSQL数据库的设计者和开发者需要根据CAP定理来决定数据库的架构，特别是当面对大规模分布式系统时。</li></ul></li><li>性能优化： <ul><li>在分布式系统中，为了提高性能和可扩展性，很多NoSQL数据库选择了可用性和分区容错性，牺牲了强一致性，采用最终一致性模型。</li></ul></li><li>应用场景： <ul><li>不同的NoSQL数据库根据其应用场景和需求，可能在CAP定理的三个特性中做出不同的权衡。例如，一些数据库可能更注重一致性，而另一些则可能更注重可用性和分区容错性</li></ul></li></ul></blockquote><h2 id="请解释以下概念" tabindex="-1">请解释以下概念 <a class="header-anchor" href="#请解释以下概念" aria-label="Permalink to &quot;请解释以下概念&quot;">​</a></h2><div class="info custom-block github-alert"><p class="custom-block-title">+ 高可用性（High Availability）</p><p>高可用性是指系统在面对<strong>硬件故障、软件故障、网络问题或其他问题</strong>时，仍能继续运行并提供服务的能力。在NoSQL数据库中，高可用性通常通过以下方式实现：</p><p>副本：数据在多个节点上进行复制，以便在主节点故障时，其他副本可以接管服务。 故障转移：系统能够自动检测到节点故障，并迅速将请求重定向到健康的节点。 冗余：通过在不同的物理位置或服务器上存储数据副本，减少单点故障的风险。</p></div><div class="info custom-block github-alert"><p class="custom-block-title">+ 可扩展性（Scalability）</p><p>可扩展性是指系统能够通过<strong>增加资源(如服务器、存储或处理能力)</strong> 来应对增长的工作负载。NoSQL数据库的可扩展性通常分为两种：</p><ul><li>垂直扩展（Vertical Scaling）：通过增加<em>单个服务器的资源（如CPU、内存）</em> 来提升性能。</li><li>水平扩展（Horizontal Scaling）：通过增加<em>更多的服务器或节点来分散负载</em>，这是NoSQL数据库的常见扩展方式，允许系统几乎无限地扩展以处理更大的数据量和更高的并发请求。</li></ul></div><div class="info custom-block github-alert"><p class="custom-block-title">+ 分布式系统（Distributed System）</p><p>分布式系统是由多个物理或逻辑上分离的计算机组件组成的系统，这些组件通过网络相互连接和通信，协同工作以完成复杂的任务。在NoSQL数据库的上下文中，分布式系统的特点包括：</p><p><em><strong>数据分布</strong></em>：数据被分割并存储在多个节点上，以实现负载均衡和冗余。 <em><strong>网络通信</strong></em>：节点之间通过网络进行数据交换和协调。 <em><strong>容错性</strong></em>：系统设计能够处理节点或网络的故障，确保整体服务的连续性。 <em><strong>一致性</strong></em>：尽管数据分布在多个节点上，系统仍需保证数据的一致性，可能是强一致性或最终一致性。 <em><strong>并发控制</strong></em>：系统需要管理多个用户或进程同时对数据进行读写操作，避免冲突和数据损坏。</p></div><h2 id="请解释以下-nosql-数据库的特点" tabindex="-1">请解释以下 NoSQL 数据库的特点 <a class="header-anchor" href="#请解释以下-nosql-数据库的特点" aria-label="Permalink to &quot;请解释以下 NoSQL 数据库的特点&quot;">​</a></h2><ul><li>键值存储(Key-Value Store) <ul><li>简洁：数据主要采用Key-Value(KV)形式储存</li><li>高速：数据驻留内存，重启时可再次加载进行使用</li><li>易扩展：根据系统负载量，灵活添加或删除服务器</li><li>对键可设置失效时间</li></ul></li><li>列存储 (Column Store) <ul><li>更好的可扩展性</li><li>高可用性</li><li>适合离线批量数据处理</li></ul></li><li>文档数据库(Document Store) <ul><li>核心概念是 &quot;文档 &quot;的概念，它与 RDBMS 中的行相对应</li><li>以某些标准格式或编码封装和编码数据，如 JSON（BSON）</li><li>文档在数据库中通过代表该文档的唯一密钥进行处理</li><li>将文档作为一个整体处理，避免将文档拆分为其组成的名称/值对</li><li>文档是无模式的，可以是非结构的数据</li></ul></li><li>图形数据库(Graph Store) <ul><li>面向图形</li><li>一切都以边、节点或属性的形式存储</li><li>每个节点和边可以有任意数量的属性</li><li>节点和边都可以贴标签</li><li>标签可用于缩小搜索范围</li></ul></li></ul><table tabindex="0"><thead><tr><th style="text-align:center;"><strong>数据库类型</strong></th><th style="text-align:left;"><strong>特点</strong></th><th style="text-align:center;"><strong>例子</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>键值存储</strong></td><td style="text-align:left;">- <em>简单性</em>：模型简单，易于理解和实现。<br>- <em>高性能</em>：读写速度快，因为数据通过键直接访问。<br>- <em>灵活性</em>：值可以是任何数据类型，包括字符串、数字、二进制数据等。<br>- <em>扩展性</em>：易于水平扩展，通过增加节点来提高性能和容量。</td><td style="text-align:center;">Redis, Riak</td></tr><tr><td style="text-align:center;"><strong>列存储</strong></td><td style="text-align:left;">- <em>优化写入</em>：因为只有列的一部分需要更新，所以写入操作更高效。<br>- <em>列式查询</em>：查询特定列时性能更高，因为只需要读取和处理需要的列。<br>- <em>可扩展性</em>：易于水平扩展，可以通过增加节点来扩展存储容量。</td><td style="text-align:center;">Cassandra, HBase</td></tr><tr><td style="text-align:center;"><strong>文档数据库</strong></td><td style="text-align:left;">- <em>灵活性</em>：文档可以包含复杂的嵌套结构，适应不断变化的数据模型。<br>- <em>自描述性</em>：文档包含其结构的元数据，无需预先定义模式。<br>- <em>丰富查询</em>：支持对文档内嵌套数据的查询。</td><td style="text-align:center;">MongoDB, CouchDB</td></tr><tr><td style="text-align:center;"><strong>图形数据库</strong></td><td style="text-align:left;">- <em>关系导向</em>：专注于存储和查询实体之间的关系。<br>- <em>灵活的查询</em>：支持复杂的关系查询，如最短路径、社区检测等。<br>- <em>高效的遍历</em>：优化了图遍历操作，可以快速找到关系路径。</td><td style="text-align:center;">Neo4j, OrientDB</td></tr></tbody></table><h2 id="请解释以下-nosql-数据库的适用场景-具体到哪种数据库-为什么" tabindex="-1">请解释以下 NoSQL 数据库的适用场景， 具体到哪种数据库，为什么 <a class="header-anchor" href="#请解释以下-nosql-数据库的适用场景-具体到哪种数据库-为什么" aria-label="Permalink to &quot;请解释以下 NoSQL 数据库的适用场景， 具体到哪种数据库，为什么&quot;">​</a></h2><p>a. 实时分析： 适用数据库：列族数据库（如Canssandra） 原因：优化了时间戳索引和快速的数据插入与查询，适合实时数据的收集和分析。全文搜索引擎则提供了强大的文本处理和搜索能力，适合实时日志分析和监控。 b. 大数据处理： 适用数据库：列存储数据库（如Cassandra, HBase） 或 文档数据库（如MongoDB）。 原因：列存储数据库优化了列的读写操作，适合处理大规模数据集，特别是在需要快速列查询的场景。文档数据库则因其灵活性和丰富的查询功能，适合处理结构化或半结构化的大数据。 c. 社交网络： 适用数据库：图形数据库（如Neo4j, OrientDB）。 原因：社交网络中存在大量的用户关系和交互数据，图形数据库能够高效地存储和查询这些复杂的关系，支持社交网络中的好友关系、社交图谱分析等。 d. 物联网 (IoT)： 适用数据库：键值数据库（如Redis） 或 文档数据库（如MongoDB）。 原因：物联网设备产生大量的非结构化，时序数据库可以高效地存储和查询这些数据。同时，物联网数据通常是半结构化的，文档数据库的灵活性使其成为处理这类数据的理想选择。</p><h2 id="请描述一个实际应用场景-说明为什么选择使用-nosql-数据库而不是关系型数据库" tabindex="-1">请描述一个实际应用场景，说明为什么选择使用 NoSQL 数据库而不是关系型数据库 <a class="header-anchor" href="#请描述一个实际应用场景-说明为什么选择使用-nosql-数据库而不是关系型数据库" aria-label="Permalink to &quot;请描述一个实际应用场景，说明为什么选择使用 NoSQL 数据库而不是关系型数据库&quot;">​</a></h2><p>实际应用场景：社交媒体平台 应用描述： 一个社交媒体平台允许用户创建个人资料、发布状态更新、分享图片和视频、关注其他用户以及参与评论和点赞等社交互动。</p><ul><li><em><strong>数据模型的灵活性</strong></em>： 社交媒体平台的数据结构经常变化，例如用户资料、帖子、评论等，它们可能是半结构化的，包含多种数据类型。NoSQL数据库如MongoDB允许灵活的数据模型，无需预先定义严格的模式。</li><li><em><strong>水平扩展性</strong></em>： 社交媒体平台可能迅速增长，需要处理大量用户和数据。NoSQL数据库如Cassandra设计用于水平扩展，通过增加更多节点来处理更大的数据量和用户请求。 高性能的读写操作： 用户生成内容和实时交互需要快速响应。NoSQL数据库通常提供高性能的读写操作，特别是在分布式环境中。</li><li><em><strong>高可用性</strong></em>： 社交媒体平台需要24/7的高可用性。NoSQL数据库通过数据复制和故障转移机制，确保服务的持续可用性。</li><li><em><strong>处理非关系型数据</strong></em>： 社交媒体数据如用户关系图、内容推荐等，是高度互联的非关系型数据。图形数据库如Neo4j可以有效地存储和查询这些复杂的网络关系。</li><li><em><strong>大规模数据处理</strong></em>： 社交媒体平台产生的数据量巨大，包括用户生成的内容、日志数据等。使用Hadoop或Spark等大数据处理框架与NoSQL数据库结合，可以高效地处理和分析这些数据。</li><li><em><strong>多样化的查询需求</strong></em>： 社交媒体平台需要支持复杂的查询，如搜索、推荐、趋势分析等。NoSQL数据库提供了丰富的查询语言和API，可以满足这些需求。</li><li><em><strong>成本效益</strong></em>： 与关系型数据库相比，NoSQL数据库通常提供更灵活的部署选项，包括云服务，这有助于降低成本和提高资源利用率。</li><li><em><strong>开发速度</strong></em>： 社交媒体平台需要快速迭代和部署新功能。NoSQL数据库的灵活性有助于加速开发过程，减少模式变更的复杂性。 通过上述原因，社交媒体平台选择使用NoSQL数据库而不是关系型数据库，可以更好地满足其业务需求，提供更好的用户体验，并支持快速增长和变化</li></ul><p>OPTIONAL MATCH 会搜索可能存在也可能不存在的描述模式，并将模式中不存在的标识符赋值为 NULL。</p><h2 id="使用neo4j中的cypher语言创建一个热门电影-电视剧-动漫数据库-要求有至少三类标签、六个节点和两种关系" tabindex="-1">使用Neo4j中的Cypher语言创建一个热门电影/电视剧/动漫数据库，要求有至少三类标签、六个节点和两种关系 <a class="header-anchor" href="#使用neo4j中的cypher语言创建一个热门电影-电视剧-动漫数据库-要求有至少三类标签、六个节点和两种关系" aria-label="Permalink to &quot;使用Neo4j中的Cypher语言创建一个热门电影/电视剧/动漫数据库，要求有至少三类标签、六个节点和两种关系&quot;">​</a></h2><div class="language-cypher vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cypher</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建 Show 节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (got:Show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Game of Thrones&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建 Character 节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (jon:Character </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Jon Snow&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (dany:Character </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Daenerys Targaryen&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (tyrion:Character </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Tyrion Lannister&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建 Actor 节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (kit:Actor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kit Harington&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (emilia:Actor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Emilia Clarke&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (peter:Actor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Peter Dinklage&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (kit)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ACTED_IN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(got)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (emilia)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ACTED_IN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(got)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (peter)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ACTED_IN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(got)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (jon)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAS_CHARACTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(got)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (dany)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAS_CHARACTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(got)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (tyrion)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAS_CHARACTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(got)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (kit)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PLAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jon)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (emilia)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PLAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dany)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (peter)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PLAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tyrion)</span></span></code></pre></div><h2 id="简述mongodb数据库的优势" tabindex="-1">简述MongoDB数据库的优势 <a class="header-anchor" href="#简述mongodb数据库的优势" aria-label="Permalink to &quot;简述MongoDB数据库的优势&quot;">​</a></h2><ul><li>易用性：灵活的文档模型。JSON格式简单易学</li><li>支持高性能访问数据。存储引擎是文档型数据库的核心组件。</li><li>可扩展性：支持大数据分布式存储，服务能力水平可横向弹性扩展</li></ul><h2 id="oltp-and-olap" tabindex="-1">OLTP and OLAP <a class="header-anchor" href="#oltp-and-olap" aria-label="Permalink to &quot;OLTP and OLAP&quot;">​</a></h2><div class="info custom-block github-alert"><p class="custom-block-title">+ OLTP</p><p>英文全称是 Online Transaction Processing System，在线事务处理系统 可以理解为日常的业务系统，比如像 ERP、OA、CRM 等等，这些业务系统主要是管理企业的基本业务流程，对数据的处理方式主要是以增、删、改为主</p></div><div class="info custom-block github-alert"><p class="custom-block-title">+ OLAP</p><p>英文全称是 Online Analytical Processing System，在线分析处理系统 可以理解为分析型系统，比如在商业智能BI应用中，支撑到前端可视化分析的数据仓库</p></div><blockquote><p>[!abstract]+ 主要差异</p><table tabindex="0"><thead><tr><th style="text-align:center;">特性</th><th style="text-align:center;">OLTP（联机事务处理）</th><th style="text-align:center;">OLAP（联机分析处理）</th></tr></thead><tbody><tr><td style="text-align:center;">数据处理类型</td><td style="text-align:center;">以增删改处理为主</td><td style="text-align:center;">以查询操作为主</td></tr><tr><td style="text-align:center;">数据来源</td><td style="text-align:center;">业务系统中直接产生的数据</td><td style="text-align:center;">来自不同的OLTP数据库的数据</td></tr><tr><td style="text-align:center;">数据处理时间</td><td style="text-align:center;">通常较短</td><td style="text-align:center;">可能较长</td></tr><tr><td style="text-align:center;">查询复杂度</td><td style="text-align:center;">查询操作相对简单</td><td style="text-align:center;">查询操作可以很复杂</td></tr><tr><td style="text-align:center;">数据库设计</td><td style="text-align:center;">通常采用第三范式（3NF）设计，避免数据冗余</td><td style="text-align:center;">通常采用反三范式设计，面向分析型应用，准备数据仓库</td></tr><tr><td style="text-align:center;">数据完整性要求</td><td style="text-align:center;">对数据完整性要求很高，必须采用完整性约束</td><td style="text-align:center;">不对业务过程负责，数据不会频繁修改，所以没有完整性约束</td></tr></tbody></table></blockquote><ol><li><p>什么是 Redis？</p></li><li><p>Redis的特点是什么？</p></li><li><p>Redis的数据结构有哪些？</p></li><li><p>Redis的发布与订阅功能是什么？</p></li><li><p>Redis事务如何实现？</p></li><li><p>Redis最与众不同的数据结构式什么？有什么特点？</p></li><li><p>Redis如何快速实现过期？</p></li><li><p>请描述一个实际应用场景，说明为什么选择使用 Redis数据库。</p></li><li><p>请简要介绍一下Cassandra是什么，以及它的主要特点是什么？</p></li><li><p>Cassandra与传统关系型数据库的主要区别是什么？</p></li><li><p>什么是Cassandra的复制策略？如何配置数据的复制和分布？</p></li><li><p>Cassandra的数据删除是如何工作的？有没有什么需要注意的地方？</p></li><li><p>Cassandra数据库中使用哪种查询语言？</p></li><li><p>Cassandra的设计目标是什么？</p></li><li><p>Cassandra的主要成分是什么？</p></li><li><p>请描述一个实际应用场景，说明为什么选择使用 Cassandra数据库？</p></li></ol>`,38)]))}const y=i(e,[["render",n]]);export{g as __pageData,y as default};
