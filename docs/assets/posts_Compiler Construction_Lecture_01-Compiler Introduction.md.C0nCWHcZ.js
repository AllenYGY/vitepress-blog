import{_ as n,c as a,a5 as l,j as t,a as i,o as s}from"./chunks/framework.CHhwEXkI.js";const b=JSON.parse('{"title":"Compiler Introduction","description":"","frontmatter":{"date":"2024-11-06T00:00:00.000Z","title":"Compiler Introduction","status":"DONE","author":["AllenYGY"],"tags":["NOTE","Compiler","Introduction"],"publish":true},"headers":[],"relativePath":"posts/Compiler Construction/Lecture/01-Compiler Introduction.md","filePath":"posts/Compiler Construction/Lecture/01-Compiler Introduction.md","lastUpdated":null}'),r={name:"posts/Compiler Construction/Lecture/01-Compiler Introduction.md"},o={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},d={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.294ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 572 453","aria-hidden":"true"},p={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},h={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.109ex",height:"1.464ex",role:"img",focusable:"false",viewBox:"0 -442 490 647","aria-hidden":"true"};function c(m,e,u,g,k,x){return s(),a("div",null,[e[7]||(e[7]=l(`<h1 id="compiler-introduction" tabindex="-1">Compiler Introduction <a class="header-anchor" href="#compiler-introduction" aria-label="Permalink to &quot;Compiler Introduction&quot;">​</a></h1><div class="info custom-block github-alert"><p class="custom-block-title">+ Compiler Definition</p><p>A compiler is a program that reads a program written in one programming language (the source language) and translates it into an equivalent program in another programming language (the target language).</p></div><hr><p><img src="https://cdn.jsdelivr.net/gh/AllenYGY/ImageSpace@main/uPic/b5MFWx.png" alt="Compiler"></p><ul><li>Input: source program</li><li>Source Code Analysis (front end)</li><li>Intermediate Code Generator <em>中间代码发生器</em></li><li>Synthesis (back end) Output: target program</li></ul><h2 id="analysis-front-end" tabindex="-1">Analysis <em>Front end</em> <a class="header-anchor" href="#analysis-front-end" aria-label="Permalink to &quot;Analysis *Front end*&quot;">​</a></h2><p>Analysis comes in three phases:</p><ul><li>Lexical analysis</li><li>Syntax analysis</li><li>Semantic analysis</li></ul><p><img src="https://cdn.jsdelivr.net/gh/AllenYGY/ImageSpace@main/uPic/P0lnxo.png" alt="Analysis"></p><h3 id="_02-compiler-lexical-analysis-lexical-analysis-词法分析" tabindex="-1">[[02-Compiler Lexical Analysis|Lexical Analysis]] <em>词法分析</em> <a class="header-anchor" href="#_02-compiler-lexical-analysis-lexical-analysis-词法分析" aria-label="Permalink to &quot;[[02-Compiler Lexical Analysis|Lexical Analysis]] *词法分析*&quot;">​</a></h3><p>The program does lexical analysis is called <strong>lexer</strong> or <strong>scanner</strong>.</p><ul><li>Reads the input program character by character as a stream.</li><li>Splits the stream into lexemes, means “lexical elements”.</li><li>Classifies each lexeme into a category of lexemes, called <strong>token</strong>.</li></ul><p>We use <strong>regular expressions</strong> to do lexical analysis.</p><p><strong>Example</strong></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><table tabindex="0"><thead><tr><th>No.</th><th>Lexeme</th><th>Token</th></tr></thead><tbody><tr><td>1</td><td>num</td><td>identifier</td></tr><tr><td>2</td><td>=</td><td>ass_opt</td></tr><tr><td>3</td><td>1</td><td>int_literal</td></tr><tr><td>4</td><td>+</td><td>plus_opt</td></tr><tr><td>5</td><td>23</td><td>int_literal</td></tr><tr><td>6</td><td>;</td><td>semicolon</td></tr></tbody></table><h4 id="tokens" tabindex="-1">Tokens <a class="header-anchor" href="#tokens" aria-label="Permalink to &quot;Tokens&quot;">​</a></h4><p>Here is a list of common tokens:</p><ul><li><strong>identifier</strong>: names the programmer chooses, like variable names; <em>变量名</em></li><li><strong>keywords</strong>: names already in the programming language, like <code>if</code>;<em>关键字</em></li><li><strong>separator</strong>: punctuation characters and paired-delimiters, like <code>{}</code>;</li><li><strong>operator</strong>: symbols operate on arguments and produce results, like <code>+</code>;</li><li><strong>literal</strong>: numeric, logical, textual, reference literals, like <code>true</code>, <code>123</code>;<em>字面量</em></li><li><strong>comment</strong></li></ul><h3 id="_03-compiler-syntax-analysis-syntax-analysis-句法分析" tabindex="-1">[[03-Compiler Syntax Analysis|Syntax Analysis]] <em>句法分析</em> <a class="header-anchor" href="#_03-compiler-syntax-analysis-syntax-analysis-句法分析" aria-label="Permalink to &quot;[[03-Compiler Syntax Analysis|Syntax Analysis]] *句法分析*&quot;">​</a></h3><p>The program which does syntax analysis is called a <em>parser</em>.</p><ul><li>Uses a grammar to analyze the form of tokens.</li><li>And groups the tokens into a nested hierarchical structure. <ul><li>The structure is called a <strong>parse tree</strong>.</li></ul></li><li>The parse tree shows <strong>the structure of the program.</strong></li><li>Internal vertices are called <strong>non-terminals</strong>. Leaves are called <strong>terminals</strong>.</li></ul><p>Same as using English grammar to check if the nouns, verbs, adjectives, etc., in a sentence are in the correct order.</p><p>Sometimes the parse tree can be extremely large.</p><ul><li>To simplify the structure, we can remove the internal vertices and let the operators be the parents.</li><li>This is called syntax tree.</li></ul><h3 id="_04-compiler-semantic-analysis-semantic-analysis-语义分析" tabindex="-1">[[04-Compiler Semantic Analysis|Semantic Analysis ]]<em>语义分析</em> <a class="header-anchor" href="#_04-compiler-semantic-analysis-semantic-analysis-语义分析" aria-label="Permalink to &quot;[[04-Compiler Semantic Analysis|Semantic Analysis ]]*语义分析*&quot;">​</a></h3><ol><li>It takes a parse tree as input.</li><li>Checks the “meaning” of the program.</li><li>Searching errors in the program. <ul><li>For example,</li><li>undefined variables,</li><li>uninitialized variables,</li><li>multiple declaration,</li><li>types of variables for operations and functions, etc.</li></ul></li></ol><p>Semantic Analysis also does <em>type conversions</em> for many programming languages.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x;</span></span></code></pre></div>`,29)),t("p",null,[e[4]||(e[4]=i("the compiler adds a type conversion on ")),t("mjx-container",o,[(s(),a("svg",d,e[0]||(e[0]=[t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D465",d:"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z",style:{"stroke-width":"3"}})])])],-1)]))),e[1]||(e[1]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"x")])],-1))]),e[5]||(e[5]=i(" before signing the value to ")),t("mjx-container",p,[(s(),a("svg",h,e[2]||(e[2]=[t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D466",d:"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1)]))),e[3]||(e[3]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"y")])],-1))]),e[6]||(e[6]=i(" ."))]),e[8]||(e[8]=l('<h4 id="errors" tabindex="-1">ERRORS <a class="header-anchor" href="#errors" aria-label="Permalink to &quot;ERRORS&quot;">​</a></h4><h2 id="intermediate-code-generator" tabindex="-1">Intermediate Code Generator <a class="header-anchor" href="#intermediate-code-generator" aria-label="Permalink to &quot;Intermediate Code Generator&quot;">​</a></h2><h3 id="three-address-code" tabindex="-1">Three-address Code <a class="header-anchor" href="#three-address-code" aria-label="Permalink to &quot;Three-address Code&quot;">​</a></h3><h2 id="synthesis-back-end" tabindex="-1">Synthesis (Back End) <a class="header-anchor" href="#synthesis-back-end" aria-label="Permalink to &quot;Synthesis (Back End)&quot;">​</a></h2>',4))])}const T=n(r,[["render",c]]);export{b as __pageData,T as default};
