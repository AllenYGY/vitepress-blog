import{_ as s,c as e,a5 as i,o as l}from"./chunks/framework.CHhwEXkI.js";const m=JSON.parse('{"title":"NoSQL-Assignment-2","description":"","frontmatter":{"date":"2024-07-12T00:00:00.000Z","title":"NoSQL-Assignment-2","status":"DONE","author":["AllenYGY"],"tags":["Assignment","NoSQL"],"publish":true},"headers":[],"relativePath":"posts/Database Management System/Assignment/NoSQL-As-2.md","filePath":"posts/Database Management System/Assignment/NoSQL-As-2.md","lastUpdated":null}'),r={name:"posts/Database Management System/Assignment/NoSQL-As-2.md"};function t(d,a,n,o,h,c){return l(),e("div",null,a[0]||(a[0]=[i('<h1 id="nosql-assignment-2" tabindex="-1">NoSQL-Assignment-2 <a class="header-anchor" href="#nosql-assignment-2" aria-label="Permalink to &quot;NoSQL-Assignment-2&quot;">​</a></h1><h2 id="_1-什么是-redis" tabindex="-1">1. 什么是 Redis？ <a class="header-anchor" href="#_1-什么是-redis" aria-label="Permalink to &quot;1. 什么是 Redis？&quot;">​</a></h2><p><strong>REmote DIctionary Server</strong>（Redis）是一个开源的内存 NoSQL 数据库项目，它实现了一个分布式、内存键值存储，并具有可选的耐用性。</p><h2 id="_2-redis的特点是什么" tabindex="-1">2. Redis的特点是什么？ <a class="header-anchor" href="#_2-redis的特点是什么" aria-label="Permalink to &quot;2. Redis的特点是什么？&quot;">​</a></h2><ol><li>读写速度极快</li><li>持久、可扩展</li><li>直接数据访问</li></ol><h2 id="_3-redis的数据结构有哪些" tabindex="-1">3. Redis的数据结构有哪些？ <a class="header-anchor" href="#_3-redis的数据结构有哪些" aria-label="Permalink to &quot;3. Redis的数据结构有哪些？&quot;">​</a></h2><ol><li>String</li><li>List</li><li>Hash</li><li>Set</li><li>Zset</li></ol><h2 id="_4-redis的发布与订阅功能是什么" tabindex="-1">4. Redis的发布与订阅功能是什么？ <a class="header-anchor" href="#_4-redis的发布与订阅功能是什么" aria-label="Permalink to &quot;4. Redis的发布与订阅功能是什么？&quot;">​</a></h2><ul><li>发送者（发布者）不需要向特定的接收者（订阅者）发送消息。</li><li>相反，发布的消息被归类到频道中，而不知道有哪些订阅者。</li><li>订阅者对一个或多个频道表示兴趣，只接收感兴趣的信息，而不知道有哪些发布者。</li></ul><h2 id="_5-redis事务如何实现" tabindex="-1">5. Redis事务如何实现？ <a class="header-anchor" href="#_5-redis事务如何实现" aria-label="Permalink to &quot;5. Redis事务如何实现？&quot;">​</a></h2><p>依靠原子性实现•要么处理所有命令，要么不处理任何命令。 EXEC 命令会触发事务中所有命令的执行。 如果客户端在调用 MULTI 命令之前，在事务上下文中失去了与服务器的连接，则不会执行任何操作。相反，如果调用 EXEC 命令，则会执行所有操作。</p><h2 id="_6-redis最与众不同的数据结构式什么-有什么特点" tabindex="-1">6. Redis最与众不同的数据结构式什么？有什么特点？ <a class="header-anchor" href="#_6-redis最与众不同的数据结构式什么-有什么特点" aria-label="Permalink to &quot;6. Redis最与众不同的数据结构式什么？有什么特点？&quot;">​</a></h2><ol><li>Redis最与众不同的数据结构是：ZSet</li><li>特点： <ul><li>对排序集进行添加、删除或更新等操作的速度非常快</li><li>由于元素是按顺序提取的，而不是事后排序，因此还可以通过得分或排名（位置）快速获取范围。</li></ul></li></ol><h2 id="_7-redis如何快速实现过期" tabindex="-1">7. Redis如何快速实现过期？ <a class="header-anchor" href="#_7-redis如何快速实现过期" aria-label="Permalink to &quot;7. Redis如何快速实现过期？&quot;">​</a></h2><p>Expire 命令可以为键设置过期时间，当键过期时，Redis 会自动删除该键。</p><h2 id="_8-请描述一个实际应用场景-说明为什么选择使用-redis数据库。" tabindex="-1">8. 请描述一个实际应用场景，说明为什么选择使用 Redis数据库。 <a class="header-anchor" href="#_8-请描述一个实际应用场景-说明为什么选择使用-redis数据库。" aria-label="Permalink to &quot;8. 请描述一个实际应用场景，说明为什么选择使用 Redis数据库。&quot;">​</a></h2><ul><li>场景：MySQL+ Redis 的组合使用，Redis 作为 MySQL 的缓存层使用，MySQL作为主要存储</li><li>原因：Redis 是一个高性能的缓存数据库，可以快速读写数据，适合存储热点数据，提高系统性能。</li></ul><h2 id="_9-请简要介绍一下cassandra是什么-以及它的主要特点是什么" tabindex="-1">9. 请简要介绍一下Cassandra是什么，以及它的主要特点是什么？ <a class="header-anchor" href="#_9-请简要介绍一下cassandra是什么-以及它的主要特点是什么" aria-label="Permalink to &quot;9. 请简要介绍一下Cassandra是什么，以及它的主要特点是什么？&quot;">​</a></h2><p>Cassandra 是：</p><ul><li>一种开源、可线性扩展、分布式和容错的 NoSQL 数据库。设计用于处理海量数据。</li></ul><p>主要特点：</p><ul><li>大规模可扩展架构</li><li>无主架构</li><li>线性扩展性能</li><li>无单点故障</li><li>故障节点可轻松恢复</li><li>具有灵活、动态的数据模型，可调整的数据一致性，多数据中心复制</li><li>数据压缩效率高</li></ul><h2 id="_10-cassandra与传统关系型数据库的主要区别是什么" tabindex="-1">10. Cassandra与传统关系型数据库的主要区别是什么？ <a class="header-anchor" href="#_10-cassandra与传统关系型数据库的主要区别是什么" aria-label="Permalink to &quot;10. Cassandra与传统关系型数据库的主要区别是什么？&quot;">​</a></h2><ul><li>传统关系型数据库面向行设计，内部组织结构围绕行的处理，适合 OLTP场景</li><li>Cassandra 列族数据库面向列设计，主要处理列，适合 OLAP 场景</li></ul><h2 id="_11-什么是cassandra的复制策略-如何配置数据的复制和分布" tabindex="-1">11. 什么是Cassandra的复制策略？如何配置数据的复制和分布？ <a class="header-anchor" href="#_11-什么是cassandra的复制策略-如何配置数据的复制和分布" aria-label="Permalink to &quot;11. 什么是Cassandra的复制策略？如何配置数据的复制和分布？&quot;">​</a></h2><p>复制策略是指 Cassandra 如何在集群中复制数据，放置数据副本</p><ul><li>Cassandra 提供两种复制策略，包括<code>SimpleStrategy</code> 和 <code>NetworkTopologyStrategy</code><ul><li>SimpleStrategy 用于只有一个数据中心的情况。SimpleStrategy 会在分区器选择的节点上放置第一个副本。之后，其余副本按顺时针方向放置在节点环中。</li><li>NetworkTopologyStrategy 用于有多个数据中心的情况。在网络拓扑策略中，会为每个数据中心分别设置副本。网络拓扑策略在环中按顺时针方向放置副本，直到到达另一个机架中的第一个节点</li></ul></li></ul><h2 id="_12-cassandra的数据删除是如何工作的-有没有什么需要注意的地方" tabindex="-1">12. Cassandra的数据删除是如何工作的？有没有什么需要注意的地方？ <a class="header-anchor" href="#_12-cassandra的数据删除是如何工作的-有没有什么需要注意的地方" aria-label="Permalink to &quot;12. Cassandra的数据删除是如何工作的？有没有什么需要注意的地方？&quot;">​</a></h2><ul><li>Cassandra 使用标记删除的方式，而不是立即删除数据。标记删除的数据会在后续的清理过程中删除。 注意的地方：</li><li>如果标记删除的数据过多，会影响查询性能，因为查询时需要扫描和过滤这些标记删除的数据。</li><li>需要注意Cassandra表的TTL（生存时间）设置，如果TTL设置不当，可能导致大量的tombstone积累。</li></ul><h2 id="_13-cassandra数据库中使用哪种查询语言" tabindex="-1">13. Cassandra数据库中使用哪种查询语言？ <a class="header-anchor" href="#_13-cassandra数据库中使用哪种查询语言" aria-label="Permalink to &quot;13. Cassandra数据库中使用哪种查询语言？&quot;">​</a></h2><p>Cassandra Query Language（CQL）是 Cassandra 数据库的查询语言。</p><h2 id="_14-cassandra的设计目标是什么" tabindex="-1">14. Cassandra的设计目标是什么？ <a class="header-anchor" href="#_14-cassandra的设计目标是什么" aria-label="Permalink to &quot;14. Cassandra的设计目标是什么？&quot;">​</a></h2><p>Apache Cassandra 的设计目标主要围绕着可扩展性、高可用性和无单点故障展开。</p><h2 id="_15-cassandra的主要成分是什么" tabindex="-1">15. Cassandra的主要成分是什么？ <a class="header-anchor" href="#_15-cassandra的主要成分是什么" aria-label="Permalink to &quot;15. Cassandra的主要成分是什么？&quot;">​</a></h2><p>Cassandra 的主要成分包括：</p><ul><li>节点</li><li>数据中心</li><li>集群</li><li>分区器</li></ul><h2 id="_16-请描述一个实际应用场景-说明为什么选择使用-cassandra数据库" tabindex="-1">16. 请描述一个实际应用场景，说明为什么选择使用 Cassandra数据库？ <a class="header-anchor" href="#_16-请描述一个实际应用场景-说明为什么选择使用-cassandra数据库" aria-label="Permalink to &quot;16. 请描述一个实际应用场景，说明为什么选择使用 Cassandra数据库？&quot;">​</a></h2><p>社交媒体的评论管理 Cassandra 面向列设计，适合处理大量数据，适合社交媒体评论管理场景，可以快速写入和读取评论数据，支持高并发读写操作。</p>',38)]))}const p=s(r,[["render",t]]);export{m as __pageData,p as default};
