import{_ as r,c as o,j as e,a,o as n}from"./chunks/framework.CHhwEXkI.js";const m=JSON.parse('{"title":"CO-Lab5","description":"","frontmatter":{"title":"CO-Lab5","date":"2023-11-21T00:00:00.000Z","status":"DONE","created":"2023-11-21T14:46","updated":"2024-05-31T01:03","publish":true},"headers":[],"relativePath":"posts/Computer Organization/Lab/CO-Lab5.md","filePath":"posts/Computer Organization/Lab/CO-Lab5.md","lastUpdated":null}'),s={name:"posts/Computer Organization/Lab/CO-Lab5.md"};function i(c,t,d,l,h,u){return n(),o("div",null,t[0]||(t[0]=[e("h1",{id:"co-lab5",tabindex:"-1"},[a("CO-Lab5 "),e("a",{class:"header-anchor",href:"#co-lab5","aria-label":'Permalink to "CO-Lab5"'},"​")],-1),e("p",null,"Select any ISA instruction you have learned in the class, and analyze the process of the fetch-decode-execution cycle step by step. It should contain change of the state and change of the registers values, and PC, IR, MAR and MDR.",-1),e("h2",{id:"add",tabindex:"-1"},[a("ADD "),e("a",{class:"header-anchor",href:"#add","aria-label":'Permalink to "ADD"'},"​")],-1),e("ol",null,[e("li",null,'Fetch: Load the address stored in the Program Counter (PC) into the Memory Address Register (MAR). Send a "read" signal from MAR to memory to fetch the instruction. Store the fetched instruction into the Instruction Register (IR). Increment the Program Counter (PC) to point to the next instruction.'),e("li",null,"Decode: Extract the opcode from the Instruction Register (IR). Decode the opcode to recognize the instruction as an ADD operation."),e("li",null,"Execute: Fetch the source operands (Src1 and Src2) from the registers specified by the instruction's fields. The Arithmetic Logic Unit (ALU) receives Src1 and Src2 values from the registers. ALU performs the addition operation: ALU_result = Src1 + Src2. Store the result (ALU_result) in the designated destination register (Dst).")],-1)]))}const f=r(s,[["render",i]]);export{m as __pageData,f as default};
