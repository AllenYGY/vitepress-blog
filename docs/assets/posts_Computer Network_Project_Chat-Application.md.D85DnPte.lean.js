import{_ as t,c as r,a5 as a,o as s}from"./chunks/framework.CHhwEXkI.js";const d=JSON.parse('{"title":"Chat-Application","description":"","frontmatter":{"date":"2024-05-01T00:00:00.000Z","title":"Chat-Application","status":"DONE","author":["AllenYGY"],"tags":["Project","Network","Cpp","Document"],"created":"2024-05-01T14:28","updated":"2024-06-11T01:14","publish":true},"headers":[],"relativePath":"posts/Computer Network/Project/Chat-Application.md","filePath":"posts/Computer Network/Project/Chat-Application.md","lastUpdated":null}'),o={name:"posts/Computer Network/Project/Chat-Application.md"};function n(i,e,l,c,u,p){return s(),r("div",null,e[0]||(e[0]=[a('<h1 id="chat-application" tabindex="-1"><a href="https://github.com/ALLENYGY/Chat-Room-Application" target="_blank" rel="noreferrer">Chat-Application</a> <a class="header-anchor" href="#chat-application" aria-label="Permalink to &quot;[Chat-Application](https://github.com/ALLENYGY/Chat-Room-Application)&quot;">​</a></h1><p>A chat application allows users to interact or communicate by texting, audio, and video. It can be useful for social or commercial activities.</p><p>In this assignment, students are required to write a Chat Program based on Windows Socket Programming C++. The program should allow users to chat concurrently on the Internet (i.e., <strong>User A can send encrypted messages to User B, and vice versa</strong>). You can download the sample programs (namely, “server.cpp” and “client.cpp”) from the Web site. The program should consist of the following modules:</p><ol><li><strong>User management</strong>: provide functions to add, delete, or group users;</li><li><strong>Group chat</strong>: allow users to chat as a group;</li><li><strong>Management of connections</strong>: support at least three concurrent connections.</li></ol><p><strong>User Management</strong>: Implemented By Server</p><ul><li>Server: Store the User Information</li></ul><p><strong>Group chat</strong>: Group started by Client</p><ul><li>Server Provide all users for Client User to select.</li></ul><p><strong>Management of connections</strong>: Give every User a Threads</p><blockquote><p>[!abstract]- Content Chinese version 起初，我们的客户端实现仅采用了单线程方式，消息的接收和发送是交替进行的。这种实现方式存在一个显著的问题：客户端无法同时进行消息的接收和发送操作，而是只能在完成接收后进行发送，反之亦然。这导致了客户端在等待接收或发送消息时会发生阻塞，影响用户体验。</p><p>为了克服这一问题，我们引入了多线程技术。在客户端中，我们分别为消息的接收和发送操作创建了独立的线程，从而实现了这两项操作的并发处理。这一改进使得客户端可以同时进行消息的接收和发送，提高了响应速度和用户体验。</p><p>在服务器端，我们引入了互斥锁（mutex）来确保数据传输的正确性和线程安全性。当多个用户向同一个用户发送消息时，服务器会将这些消息推送到该用户的消息队列中，并在这一过程中使用互斥锁来保证消息的有序和完整传输。这样，服务器能够在多用户环境下稳定、高效地管理消息队列，确保每个用户都能正确收到发送给他们的消息。</p></blockquote><hr><p>I&#39;m going to talk some details about how we implemented this chat room application.</p><h2 id="overview-of-the-data-structure" tabindex="-1"><strong>Overview Of the Data structure</strong> <a class="header-anchor" href="#overview-of-the-data-structure" aria-label="Permalink to &quot;**Overview Of the Data structure**&quot;">​</a></h2><p><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DCN/Project-DataStructure.png" alt="DataStructure"></p><ul><li>Sock: Client socket</li><li>messageQueue: Queue to store messages to be sent</li><li>queueMutex: Mutex to protect the message queue</li><li>queueCond: Condition variable to notify the send thread</li></ul><hr><h2 id="multithreading-on-both-client-and-server-side" tabindex="-1"><strong>Multithreading on both client and server side</strong> <a class="header-anchor" href="#multithreading-on-both-client-and-server-side" aria-label="Permalink to &quot;**Multithreading on both client and server side**&quot;">​</a></h2><p><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DCN/Project/ServerThreads.png" alt="ServerThreads"></p><ol><li>Initially, our client was single-threaded, handling message receiving and sending alternately.</li><li>This caused a problem: the client or server couldn&#39;t receive and send messages concurrently, leading to blocking and a poor user experience.</li></ol><p>To solve this, we introduced multithreading. Separate threads for receiving and sending to improve responsiveness and user experience.</p><hr><h2 id="message-queuing-on-the-server-side" tabindex="-1"><strong>Message queuing on the server side</strong> <a class="header-anchor" href="#message-queuing-on-the-server-side" aria-label="Permalink to &quot;**Message queuing on the server side**&quot;">​</a></h2><p><img src="https://cdn.jsdelivr.net/gh/ALLENYGY/ImageSpace@master/IMAGE/DCN/Project/SendMessage.png" alt="Send"></p><ol><li>On the server side, we introduced a mutex to ensure data transmission accuracy and thread safety.</li><li>When multiple users send messages to the same user, the server pushes these messages into the receiver&#39;s message queue using a mutex to lock the process.</li><li>This ensures orderly and complete message transmission.</li></ol><p>These changes enabled the server to efficiently manage message queues in a multi-user environment, ensuring each user correctly receives their messages.</p><hr>',26)]))}const g=t(o,[["render",n]]);export{d as __pageData,g as default};
