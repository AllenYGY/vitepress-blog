import{_ as o,c as l,j as t,a,a5 as s,o as n}from"./chunks/framework.CHhwEXkI.js";const L=JSON.parse('{"title":"From-Machine-Language-to-Assembly-Language","description":"","frontmatter":{"title":"From-Machine-Language-to-Assembly-Language","date":"2023-11-20T00:00:00.000Z","author":["AllenYGY"],"status":"DONE","tags":["NOTE","CO","Lec9"],"created":"2024-01-16T21:03","updated":"2024-05-31T01:16","publish":true},"headers":[],"relativePath":"posts/Computer Organization/Lecture/11-From-Machine-Language-to-Assembly-Language.md","filePath":"posts/Computer Organization/Lecture/11-From-Machine-Language-to-Assembly-Language.md","lastUpdated":null}'),i={name:"posts/Computer Organization/Lecture/11-From-Machine-Language-to-Assembly-Language.md"},r={id:"assembly-language-syntax",tabindex:"-1"},d={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},m={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.375ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.268ex",height:"1.92ex",role:"img",focusable:"false",viewBox:"0 -683 2328.6 848.6","aria-hidden":"true"},Q={id:"assembly-language-instruction",tabindex:"-1"},u={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},T={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.375ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.268ex",height:"1.92ex",role:"img",focusable:"false",viewBox:"0 -683 2328.6 848.6","aria-hidden":"true"},p={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},g={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.865ex",height:"1.902ex",role:"img",focusable:"false",viewBox:"0 -683 1266.3 840.8","aria-hidden":"true"};function h(b,e,c,x,w,y){return n(),l("div",null,[e[15]||(e[15]=t("h1",{id:"from-machine-language-to-assembly-language",tabindex:"-1"},[a("From-Machine-Language-to-Assembly-Language "),t("a",{class:"header-anchor",href:"#from-machine-language-to-assembly-language","aria-label":'Permalink to "From-Machine-Language-to-Assembly-Language"'},"​")],-1)),e[16]||(e[16]=t("p",null,"Assembler is a program that turns symbols into binary machine instructions.",-1)),t("h2",r,[t("mjx-container",d,[(n(),l("svg",m,e[0]||(e[0]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(1114,0)"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(811,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),e[1]||(e[1]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"L"),t("mi",null,"c"),t("msub",null,[t("mo",null,"−"),t("mn",null,"3")])])],-1))]),e[2]||(e[2]=a(" Assembly language Syntax ")),e[3]||(e[3]=t("a",{class:"header-anchor",href:"#assembly-language-syntax","aria-label":'Permalink to "$Lc-_3$ Assembly language Syntax"'},"​",-1))]),e[17]||(e[17]=t("ul",null,[t("li",null,[a("Each line of a program is one of the following: "),t("ul",null,[t("li",null,"an instruction"),t("li",null,"an assembler directive (or pseudo-op)"),t("li",null,"a comment")])]),t("li",null,"Whitespace (between symbols) and case are ignored."),t("li",null,"Comments (beginning with “;”) are also ign")],-1)),t("h2",Q,[t("mjx-container",u,[(n(),l("svg",T,e[4]||(e[4]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(1114,0)"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(811,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),e[5]||(e[5]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"L"),t("mi",null,"c"),t("msub",null,[t("mo",null,"−"),t("mn",null,"3")])])],-1))]),e[6]||(e[6]=a(" Assembly Language Instruction ")),e[7]||(e[7]=t("a",{class:"header-anchor",href:"#assembly-language-instruction","aria-label":'Permalink to "$Lc-_3$ Assembly Language Instruction"'},"​",-1))]),e[18]||(e[18]=t("p",null,"LABEL OPCODE OPERANDS COMMENTS",-1)),e[19]||(e[19]=t("ul",null,[t("li",null,"optional: Label, Comments"),t("li",null,"mandatory: Opcode, Operands")],-1)),e[20]||(e[20]=t("h2",{id:"opcode-and-operands",tabindex:"-1"},[a("Opcode and Operands "),t("a",{class:"header-anchor",href:"#opcode-and-operands","aria-label":'Permalink to "Opcode and Operands"'},"​")],-1)),t("ul",null,[e[14]||(e[14]=t("li",null,[a("Opcodes: "),t("ul",null,[t("li",null,"reserved symbols that correspond to LC-3 instructions"),t("li",null,"example: ADD, AND, LD, LDR")])],-1)),t("li",null,[e[13]||(e[13]=a("Operands： ")),t("ul",null,[t("li",null,[e[10]||(e[10]=a("Registers:")),t("mjx-container",p,[(n(),l("svg",g,e[8]||(e[8]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(792,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),e[9]||(e[9]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msub",null,[t("mi",null,"R"),t("mi",null,"n")])])],-1))])]),e[11]||(e[11]=t("li",null,"Numbers: #(DEC) or x(HEX)",-1)),e[12]||(e[12]=t("li",null,"Label: symbolic name oof memory location",-1))])])]),e[21]||(e[21]=s(`<h2 id="labels" tabindex="-1">Labels <a class="header-anchor" href="#labels" aria-label="Permalink to &quot;Labels&quot;">​</a></h2><p>placed at the beginning of the line assigns a symbolic name to the address corresponding to line</p><div class="language-assmbely vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">assmbely</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Loop ADD R1,R1,#-1</span></span>
<span class="line"><span>     Brp LOOP</span></span></code></pre></div><h2 id="comments" tabindex="-1">Comments <a class="header-anchor" href="#comments" aria-label="Permalink to &quot;Comments&quot;">​</a></h2><ul><li>Anything after a semincolon is comments</li><li>Ignored by assembler</li><li>Used by humans to document/ understand programs</li><li>Tips for useful comments: <ul><li>avoid restating the obvious, as “decrement R1”</li><li>provide additional insight, as in “accumulate product in R6”</li><li>use comments to separate pieces of program</li></ul></li></ul><h2 id="assembler-directives" tabindex="-1">Assembler Directives <a class="header-anchor" href="#assembler-directives" aria-label="Permalink to &quot;Assembler Directives&quot;">​</a></h2><p>Pseudo-operations</p><ul><li>Do not refer to operations executed by program</li><li>used by assembler</li><li>look like instruction, but &quot;opcode&quot; starts whith dots</li></ul><table tabindex="0"><thead><tr><th>Opcode</th><th>Operand</th><th>Meaning</th></tr></thead><tbody><tr><td>.ORIG</td><td>address</td><td>starting address of program</td></tr><tr><td>.END</td><td>end of program</td><td></td></tr><tr><td>.BLKW</td><td>n</td><td>allocate n words of storage</td></tr><tr><td>.FILL</td><td>n</td><td>allocate one word,initializa with value n</td></tr><tr><td>.STRINGZ</td><td>n-character string</td><td>allocate n+1 locations, initialize w/characters and null terminator</td></tr></tbody></table>`,9))])}const v=o(i,[["render",h]]);export{L as __pageData,v as default};
